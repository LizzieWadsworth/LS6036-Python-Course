# Cheatsheet

> Quick examples of: **strings, lists, dictionaries, if/else, user input, for loops, while loops, matplotlib, functions**.

## 1. Strings 

Letters and words - useful for DNA / protein sequences

```{python}
#| eval: true
# Define a string with quotes "" or ''
seq = "acgtacgtaaa"

# String functions
seq_upper = seq.upper()          # "ACGTACGTAAA"
length = len(seq_upper)          # 11
a_count = seq_upper.count("A")   # 4


# String indexing - [start:stop:step]
first = seq_upper[0]             # "A"
last_three = seq_upper[-3:]      # "AAA"
middle = seq_upper[2:6]          # "GTAC"

# Use with if statement
if "TATA" in seq_upper:
    print(f"TATA in {seq_upper}")  
elif "TACG" in seq_upper:
    print(f"TACG in {seq_upper}")  
```

---

## 2. User input

```{python}
#| eval: false

# Input name using user input - saves as a string
name = input("Your name: ")

# Input age, and convert from string to integer
age_text = input("Your age: ")
age = int(age_text)

# Print solution
print(f"Hello {name}, next year you will be {age + 1}.")
```

---

## 3. if / else

```{python}
#| eval: true

# Variables to be tested in if statement
gc = 0.45
status = "Unknown"

# define if statement
if gc >= 0.6:
    status = "High GC"

# elif (else if, when if was False) 
elif gc < 0.35:
    status = "Low GC"

# else (both if and elif were False)
else:
    status = "Moderate GC"

print(status)
```

---

## 4. Lists

Collections of objects - useful for lists of sequences or genes

```{python}
#| eval: true
# Define a list with square brackets []
genes = ["BRCA1", "TP53", "EGFR"]

# List functions
genes.append("MYC")          # add to end
n_genes = len(genes)         # 4
genes.sort()                 # sort alphabetically

# List indexing - [start:stop:step]
first_two = genes[:2]        # ["BRCA1", "TP53"]

# Use with if statement
if "TP53" in genes:
    print(f"TATA in {genes}") 
```

---

## 5. Dictionaries

Useful for storing and retrieving information about a particular item; e.g. for information about each sample

```{python}
#| eval: true
# define dictionary with curly brackets {}
sample_species = {"S1": "E.coli", "S2": "S.aureus"}

# add new items to the dictionary
sample_species["S3"] = "B.subtilis"

# retrieve information
print(sample_species["S3"])

# use with for loop
for sample in sample_species.keys():
    print(f"{sample} is {sample_species[sample]}")
```

---

## 6. for loops

```{python}
#| eval: true

# Define sequence to loop through
seq = "ACGTACGTAAA"
# Define dictionary to count bases
counts = {"A": 0, "C": 0, "G": 0, "T": 0}

# Loop through every base in sequence seq
for base in seq:
    # Add 1 to dictionary value for base key
    counts[base] += 1

# print result
print(counts)
```

---

## 7. while loops

```{python}
#| eval: true

# set initial values
max_value = 5
current_value = 0

# while loop for until current value reaches 10
while current_value < max_value: 
    print(f"{current_value} less than {max_value}")
    # add 1 to current value
    current_value += 1
```

::: {.callout-caution }
## Neverending while loop
Always make sure the statement you are evaluating (here `current_value < max_value`) **changes during the loop** - otherwise your while loop will loop forever!

We did this here by doing a `+1` to our `current_value`, you could also change a Boolean from `False` to `True`
:::


---

## 8. matplotlib

```{python}
#| eval: true
# import matplotlib plotting package using plt alias
import matplotlib.pyplot as plt

# Define data to plot - x and y values 
x = [1,2,3]
y = [10,0,14]
y2 = [11, 14, 3]

# plot values 
plt.plot(x,y, label = "Line 1")
plt.plot(x,y2, label="Line 2")

# Gather labels for legend
plt.legend()

# Change title, x and y axis labels
plt.title("Example graph")
plt.xlabel("X axis label")
plt.ylabel("Y axis label")

# Show plot
plt.show()

```

---

## 9. Functions

```{python}
#| eval: true

# Define a function - a piece of code you'll need to use more than once, to avoid copy and pasting 
def gc_content(seq): # seq is an argument
    """Use triple quotes to leave a function description"""
    # do code you want to apply to seq
    # here we calculate counts of G and C
    gc = seq.count("G") + seq.count("C")
    # now we calculate the length of the sequence 
    seq_len = len(seq)
    # we can now calculate the proportion of GC in the sequence
    gc_proportion = gc / seq_len
    # return the result
    return gc_proportion

# use function to calculate GC content of sequence
sequence_1 = "ACGTACGTAAA"
print(f"{sequence_1} has a GC content of {gc_content(sequence_1)}")

# use same function to calculate GC content of second sequence
sequence_2 = "GGTCCAGGCGT"
print(f"{sequence_2} has a GC content of {gc_content(sequence_2)}")

```
