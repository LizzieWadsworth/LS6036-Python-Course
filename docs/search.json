[
  {
    "objectID": "learn.html",
    "href": "learn.html",
    "title": "Hello World",
    "section": "",
    "text": "Hello World\nThe below python code takes the phrase “Hello World!” and prints it to the console. It’s a good way to check you are set up correctly!\n\n\n\n\n\n\nThis is using the in-build function called print(), which will output anything that we put inside the brackets.\nNow try the below variations. Which ones work? Which don’t work? When one doesn’t work, what error message do you get? Why?\n\nprint(Hello World!)\nprint('Hello',  'World!')\nprint(55)\nprint(Fifty five)\nprint('Fifty five')\nprint('Fifty five\nprint(55.5)\n\nAlso try:\n\nCan you use double quotes \" \" instead of single quotes? ' '\nCan you combine double and single quotes \"Like this'\nCan you print this exactly (with the quotes): I \"love\" Python.\nWhat happens if you put a # before print",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Hello World"
    ]
  },
  {
    "objectID": "cheatsheet.html",
    "href": "cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Quick examples of: strings, lists, dictionaries, if/else, user input, for loops, while loops, matplotlib, functions."
  },
  {
    "objectID": "cheatsheet.html#strings",
    "href": "cheatsheet.html#strings",
    "title": "Cheatsheet",
    "section": "1. Strings",
    "text": "1. Strings\nLetters and words - useful for DNA / protein sequences\n\n# Define a string with quotes \"\" or ''\nseq = \"acgtacgtaaa\"\n\n# String functions\nseq_upper = seq.upper()          # \"ACGTACGTAAA\"\nlength = len(seq_upper)          # 11\na_count = seq_upper.count(\"A\")   # 4\n\n\n# String indexing - [start:stop:step]\nfirst = seq_upper[0]             # \"A\"\nlast_three = seq_upper[-3:]      # \"AAA\"\nmiddle = seq_upper[2:6]          # \"GTAC\"\n\n# Use with if statement\nif \"TATA\" in seq_upper:\n    print(f\"TATA in {seq_upper}\")  \nelif \"TACG\" in seq_upper:\n    print(f\"TACG in {seq_upper}\")  \n\nTACG in ACGTACGTAAA"
  },
  {
    "objectID": "cheatsheet.html#user-input",
    "href": "cheatsheet.html#user-input",
    "title": "Cheatsheet",
    "section": "2. User input",
    "text": "2. User input\n\n# Input name using user input - saves as a string\nname = input(\"Your name: \")\n\n# Input age, and convert from string to integer\nage_text = input(\"Your age: \")\nage = int(age_text)\n\n# Print solution\nprint(f\"Hello {name}, next year you will be {age + 1}.\")"
  },
  {
    "objectID": "cheatsheet.html#if-else",
    "href": "cheatsheet.html#if-else",
    "title": "Cheatsheet",
    "section": "3. if / else",
    "text": "3. if / else\n\n# Variables to be tested in if statement\ngc = 0.45\nstatus = \"Unknown\"\n\n# define if statement\nif gc &gt;= 0.6:\n    status = \"High GC\"\n\n# elif (else if, when if was False) \nelif gc &lt; 0.35:\n    status = \"Low GC\"\n\n# else (both if and elif were False)\nelse:\n    status = \"Moderate GC\"\n\nprint(status)\n\nModerate GC"
  },
  {
    "objectID": "cheatsheet.html#lists",
    "href": "cheatsheet.html#lists",
    "title": "Cheatsheet",
    "section": "4. Lists",
    "text": "4. Lists\nCollections of objects - useful for lists of sequences or genes\n\n# Define a list with square brackets []\ngenes = [\"BRCA1\", \"TP53\", \"EGFR\"]\n\n# List functions\ngenes.append(\"MYC\")          # add to end\nn_genes = len(genes)         # 4\ngenes.sort()                 # sort alphabetically\n\n# List indexing - [start:stop:step]\nfirst_two = genes[:2]        # [\"BRCA1\", \"TP53\"]\n\n# Use with if statement\nif \"TP53\" in genes:\n    print(f\"TATA in {genes}\") \n\nTATA in ['BRCA1', 'EGFR', 'MYC', 'TP53']"
  },
  {
    "objectID": "cheatsheet.html#dictionaries",
    "href": "cheatsheet.html#dictionaries",
    "title": "Cheatsheet",
    "section": "5. Dictionaries",
    "text": "5. Dictionaries\nUseful for storing and retrieving information about a particular item; e.g. for information about each sample\n\n# define dictionary with curly brackets {}\nsample_species = {\"S1\": \"E.coli\", \"S2\": \"S.aureus\"}\n\n# add new items to the dictionary\nsample_species[\"S3\"] = \"B.subtilis\"\n\n# retrieve information\nprint(sample_species[\"S3\"])\n\n# use with for loop\nfor sample in sample_species.keys():\n    print(f\"{sample} is {sample_species[sample]}\")\n\nB.subtilis\nS1 is E.coli\nS2 is S.aureus\nS3 is B.subtilis"
  },
  {
    "objectID": "cheatsheet.html#for-loops",
    "href": "cheatsheet.html#for-loops",
    "title": "Cheatsheet",
    "section": "6. for loops",
    "text": "6. for loops\n\n# Define sequence to loop through\nseq = \"ACGTACGTAAA\"\n# Define dictionary to count bases\ncounts = {\"A\": 0, \"C\": 0, \"G\": 0, \"T\": 0}\n\n# Loop through every base in sequence seq\nfor base in seq:\n    # Add 1 to dictionary value for base key\n    counts[base] += 1\n\n# print result\nprint(counts)\n\n{'A': 5, 'C': 2, 'G': 2, 'T': 2}"
  },
  {
    "objectID": "cheatsheet.html#while-loops",
    "href": "cheatsheet.html#while-loops",
    "title": "Cheatsheet",
    "section": "7. while loops",
    "text": "7. while loops\n\n# set initial values\nmax_value = 5\ncurrent_value = 0\n\n# while loop for until current value reaches 10\nwhile current_value &lt; max_value: \n    print(f\"{current_value} less than {max_value}\")\n    # add 1 to current value\n    current_value += 1\n\n0 less than 5\n1 less than 5\n2 less than 5\n3 less than 5\n4 less than 5\n\n\n\n\n\n\n\n\nCautionNeverending while loop\n\n\n\nAlways make sure the statement you are evaluating (here current_value &lt; max_value) changes during the loop - otherwise your while loop will loop forever!\nWe did this here by doing a +1 to our current_value, you could also change a Boolean from False to True"
  },
  {
    "objectID": "cheatsheet.html#matplotlib",
    "href": "cheatsheet.html#matplotlib",
    "title": "Cheatsheet",
    "section": "8. matplotlib",
    "text": "8. matplotlib\n\n# import matplotlib plotting package using plt alias\nimport matplotlib.pyplot as plt\n\n# Define data to plot - x and y values \nx = [1,2,3]\ny = [10,0,14]\ny2 = [11, 14, 3]\n\n# plot values \nplt.plot(x,y, label = \"Line 1\")\nplt.plot(x,y2, label=\"Line 2\")\n\n# Gather labels for legend\nplt.legend()\n\n# Change title, x and y axis labels\nplt.title(\"Example graph\")\nplt.xlabel(\"X axis label\")\nplt.ylabel(\"Y axis label\")\n\n# Show plot\nplt.show()"
  },
  {
    "objectID": "cheatsheet.html#functions",
    "href": "cheatsheet.html#functions",
    "title": "Cheatsheet",
    "section": "9. Functions",
    "text": "9. Functions\n\n# Define a function - a piece of code you'll need to use more than once, to avoid copy and pasting \ndef gc_content(seq): # seq is an argument\n    \"\"\"Use triple quotes to leave a function description\"\"\"\n    # do code you want to apply to seq\n    # here we calculate counts of G and C\n    gc = seq.count(\"G\") + seq.count(\"C\")\n    # now we calculate the length of the sequence \n    seq_len = len(seq)\n    # we can now calculate the proportion of GC in the sequence\n    gc_proportion = gc / seq_len\n    # return the result\n    return gc_proportion\n\n# use function to calculate GC content of sequence\nsequence_1 = \"ACGTACGTAAA\"\nprint(f\"{sequence_1} has a GC content of {gc_content(sequence_1)}\")\n\n# use same function to calculate GC content of second sequence\nsequence_2 = \"GGTCCAGGCGT\"\nprint(f\"{sequence_2} has a GC content of {gc_content(sequence_2)}\")\n\nACGTACGTAAA has a GC content of 0.36363636363636365\nGGTCCAGGCGT has a GC content of 0.7272727272727273"
  },
  {
    "objectID": "careers.html",
    "href": "careers.html",
    "title": "Careers",
    "section": "",
    "text": "Links to some graduate schemes and masters programs in bioinformatics in the UK — plus adjacent roles that use programming skills.\n\n\n\n\nNHS STPMRCGenomics EnglandWellcome SangerGSK\n\n\n\n\n\nNHS Logo\n\n\n\n\n\nScientist Training Programme (STP) — 3-year salaried training with an accredited master’s and NHS Trust placement.\n\nOverview & entry requirements: Health Careers – STP\n\nClinical Bioinformatics (Genomics) specialty info & example posts: NHS STP – Clinical Bioinformatics (Genomics) and Health Careers – Clinical Bioinformatics\n\n\n\n\n\n\n\n\nMRC Logo\n\n\n\n\nThe MRC Laboratory of Medical Sciences (LMS) runs a Science Technology Graduate Programme with placements in the Bioinformatics Facility.\n\nProgramme: Science Technology Graduate Programme — Bioinformatics Facility, LMS\n\nOrganisation: MRC LMS\n\nDuration: 2 years — Year 1 rotations & training, Year 2 independent project work.\n\nSalary: ~£36,000 (London rate).\n\nFocus: supporting bioinformatics analyses across groups, developing pipelines, learning HPC systems, and gaining transferable programming/data analysis skills.\n\nOutcome: strong technical grounding in applied bioinformatics, good launchpad for PhD or facility-based roles.\n\n\n\n\n\n\n\nGenomics England Logo\n\n\n\n\n\nCareers & Open Roles • Bioinformatics Careers Page\n\nOrganisation: government-funded company delivering large-scale genomics programmes (including the 100,000 Genomes Project).\n\nGraduate opportunities:\n\nRoles in bioinformatics, data engineering, software engineering, health informatics.\n\nWork includes variant calling, clinical reporting pipelines, data curation, cloud infrastructure, and data sharing platforms.\n\nOften advertised as associate bioinformatician, graduate data scientist, or trainee bioinformatician.\n\n\nEnvironment: hybrid work (London / flexible), with strong ties to NHS Genomic Medicine Service.\n\nWhy apply: exposure to clinical genomics pipelines at national scale, real-world health data, and policy-relevant projects. Good balance of science + healthcare delivery.\n\n\n\n\n\n\n\nWellcome Sanger Logo\n\n\n\n\n\nInstitute: world-leading genomics research centre in Cambridge (UK), with large-scale sequencing, cellular genetics, cancer, pathogen, and computational biology programmes.\n\nSanger Early Careers hub • Graduate scheme\n\nProgramme type: 2-year graduate programme, fixed-term contract.\n\nRotations: typically 3–4 placements across teams (bioinformatics, data analysis, lab science, project management).\n\nTraining: structured workshops in coding, reproducible analysis, presentation skills, scientific writing, and professional development.\n\nEligibility: recent graduates (BSc/MSc/PhD) in relevant disciplines (biology, maths, computer science, data science).\n\nWhy apply: Sanger exposes you to “big science” in genomics and bioinformatics — from cancer genomics pipelines to pathogen surveillance — with huge data sets and cutting-edge infrastructure. Many alumni progress into PhDs, postdocs, or permanent informatics roles.\n\n\n\n\n\n\n\nGSK Logo\n\n\n\n\n\nEarly Careers Hub • R&D (Data/AI) Overview\n\nProgramme: Future Leaders Graduate Programme (FLP), 2–3 years.\n\nTracks: R&D (Data Science, AI, Computational Biology, Bioinformatics), Manufacturing, Commercial, and more.\n\nRotations: multiple placements across discovery science, clinical data, and informatics teams.\n\nTraining: leadership development, global networking, technical workshops (machine learning, advanced analytics, drug discovery pipelines).\n\nLocations: UK (Stevenage, Ware, Brentford), with potential international placements.\n\nWhy apply: GSK offers broad pharma R&D exposure, with projects spanning omics integration, drug target validation, imaging analysis, and clinical trial data. Ideal for those considering pharma-industry bioinformatics or translational data science careers.\n\n\n\n\n\n\n\n\n\nData Science Conversion MScBioinformatics MSc by Research\n\n\nHere are key details for the Data Science Conversion MSc at Kingston University, especially for those interested in bioinformatics or computational biology.\n\nCourse page: Data Science Conversion MSc – Kingston University :contentReferenceoaicite:0\n\nIt is a conversion course aimed at those without strong backgrounds in programming or statistics.\n\nIncludes a pre-sessional bootcamp / ‘boot camp’ (≈ 2-week intensive) to bring everyone to baseline levels in programming, statistics, data modelling.\nDuration options:\n\nFull-time: 1 year (starting September)\nPart-time: 2 years\n\nTypical entry: 2:2 or above honours degree in any discipline. Individual applications may require additional requirements.\nAccreditation by the British Computer Society (BCS).\n\n\n\n\nBritish Computer Society Logo\n\n\n\n\nAn MSc by Research is a one-year, research-intensive master’s (Level 7) where most credit comes from a thesis-style project under a supervisor. It’s ideal if you want deep research experience before a PhD or a technical industry role.\nIf you’re interested in staying with us to do a Bioinformatics MSc by Research, come and have a chat with us about potential projects!\nInformation about fees for MRes degrees can be found here.\n\n\n\n\n\n\n\nHealth Data Analyst / Health Informatician — NHS Trusts, public health bodies, charities. SQL/Python/R on Electronic Health Records (EHRs) and other healthcare data.\nBiostatistician / Statistical Programmer — Clinical Research Organizations and pharmaceutical companies (R/Python), clinical trials analysis and reporting.\n\nData Scientist (Healthcare / Pharmaceutical / MedTech) — modelling omics (genomics, proteomics, transcriptomics…) or real-world data.\nBioimage Analysis / Scientific Software Engineer — microscopy pipelines, segmentation, tracking (Python/C++, image processing).\n\nScientific Publishing / Data Curation — build tools and pipelines that improve metadata, reproducibility and peer-review workflows.\n\nAnd you are also qualified for other programming jobs outside of Life Scientists! Have a look for boot camps and graduate schemes, or do a job search using the keyword “python”."
  },
  {
    "objectID": "careers.html#uk-graduate-schemes-early-career-programmes",
    "href": "careers.html#uk-graduate-schemes-early-career-programmes",
    "title": "Careers",
    "section": "",
    "text": "NHS STPMRCGenomics EnglandWellcome SangerGSK\n\n\n\n\n\nNHS Logo\n\n\n\n\n\nScientist Training Programme (STP) — 3-year salaried training with an accredited master’s and NHS Trust placement.\n\nOverview & entry requirements: Health Careers – STP\n\nClinical Bioinformatics (Genomics) specialty info & example posts: NHS STP – Clinical Bioinformatics (Genomics) and Health Careers – Clinical Bioinformatics\n\n\n\n\n\n\n\n\nMRC Logo\n\n\n\n\nThe MRC Laboratory of Medical Sciences (LMS) runs a Science Technology Graduate Programme with placements in the Bioinformatics Facility.\n\nProgramme: Science Technology Graduate Programme — Bioinformatics Facility, LMS\n\nOrganisation: MRC LMS\n\nDuration: 2 years — Year 1 rotations & training, Year 2 independent project work.\n\nSalary: ~£36,000 (London rate).\n\nFocus: supporting bioinformatics analyses across groups, developing pipelines, learning HPC systems, and gaining transferable programming/data analysis skills.\n\nOutcome: strong technical grounding in applied bioinformatics, good launchpad for PhD or facility-based roles.\n\n\n\n\n\n\n\nGenomics England Logo\n\n\n\n\n\nCareers & Open Roles • Bioinformatics Careers Page\n\nOrganisation: government-funded company delivering large-scale genomics programmes (including the 100,000 Genomes Project).\n\nGraduate opportunities:\n\nRoles in bioinformatics, data engineering, software engineering, health informatics.\n\nWork includes variant calling, clinical reporting pipelines, data curation, cloud infrastructure, and data sharing platforms.\n\nOften advertised as associate bioinformatician, graduate data scientist, or trainee bioinformatician.\n\n\nEnvironment: hybrid work (London / flexible), with strong ties to NHS Genomic Medicine Service.\n\nWhy apply: exposure to clinical genomics pipelines at national scale, real-world health data, and policy-relevant projects. Good balance of science + healthcare delivery.\n\n\n\n\n\n\n\nWellcome Sanger Logo\n\n\n\n\n\nInstitute: world-leading genomics research centre in Cambridge (UK), with large-scale sequencing, cellular genetics, cancer, pathogen, and computational biology programmes.\n\nSanger Early Careers hub • Graduate scheme\n\nProgramme type: 2-year graduate programme, fixed-term contract.\n\nRotations: typically 3–4 placements across teams (bioinformatics, data analysis, lab science, project management).\n\nTraining: structured workshops in coding, reproducible analysis, presentation skills, scientific writing, and professional development.\n\nEligibility: recent graduates (BSc/MSc/PhD) in relevant disciplines (biology, maths, computer science, data science).\n\nWhy apply: Sanger exposes you to “big science” in genomics and bioinformatics — from cancer genomics pipelines to pathogen surveillance — with huge data sets and cutting-edge infrastructure. Many alumni progress into PhDs, postdocs, or permanent informatics roles.\n\n\n\n\n\n\n\nGSK Logo\n\n\n\n\n\nEarly Careers Hub • R&D (Data/AI) Overview\n\nProgramme: Future Leaders Graduate Programme (FLP), 2–3 years.\n\nTracks: R&D (Data Science, AI, Computational Biology, Bioinformatics), Manufacturing, Commercial, and more.\n\nRotations: multiple placements across discovery science, clinical data, and informatics teams.\n\nTraining: leadership development, global networking, technical workshops (machine learning, advanced analytics, drug discovery pipelines).\n\nLocations: UK (Stevenage, Ware, Brentford), with potential international placements.\n\nWhy apply: GSK offers broad pharma R&D exposure, with projects spanning omics integration, drug target validation, imaging analysis, and clinical trial data. Ideal for those considering pharma-industry bioinformatics or translational data science careers."
  },
  {
    "objectID": "careers.html#masters-study-at-kingston-university",
    "href": "careers.html#masters-study-at-kingston-university",
    "title": "Careers",
    "section": "",
    "text": "Data Science Conversion MScBioinformatics MSc by Research\n\n\nHere are key details for the Data Science Conversion MSc at Kingston University, especially for those interested in bioinformatics or computational biology.\n\nCourse page: Data Science Conversion MSc – Kingston University :contentReferenceoaicite:0\n\nIt is a conversion course aimed at those without strong backgrounds in programming or statistics.\n\nIncludes a pre-sessional bootcamp / ‘boot camp’ (≈ 2-week intensive) to bring everyone to baseline levels in programming, statistics, data modelling.\nDuration options:\n\nFull-time: 1 year (starting September)\nPart-time: 2 years\n\nTypical entry: 2:2 or above honours degree in any discipline. Individual applications may require additional requirements.\nAccreditation by the British Computer Society (BCS).\n\n\n\n\nBritish Computer Society Logo\n\n\n\n\nAn MSc by Research is a one-year, research-intensive master’s (Level 7) where most credit comes from a thesis-style project under a supervisor. It’s ideal if you want deep research experience before a PhD or a technical industry role.\nIf you’re interested in staying with us to do a Bioinformatics MSc by Research, come and have a chat with us about potential projects!\nInformation about fees for MRes degrees can be found here."
  },
  {
    "objectID": "careers.html#programming-led-jobs-outside-core-bioinformatics",
    "href": "careers.html#programming-led-jobs-outside-core-bioinformatics",
    "title": "Careers",
    "section": "",
    "text": "Health Data Analyst / Health Informatician — NHS Trusts, public health bodies, charities. SQL/Python/R on Electronic Health Records (EHRs) and other healthcare data.\nBiostatistician / Statistical Programmer — Clinical Research Organizations and pharmaceutical companies (R/Python), clinical trials analysis and reporting.\n\nData Scientist (Healthcare / Pharmaceutical / MedTech) — modelling omics (genomics, proteomics, transcriptomics…) or real-world data.\nBioimage Analysis / Scientific Software Engineer — microscopy pipelines, segmentation, tracking (Python/C++, image processing).\n\nScientific Publishing / Data Curation — build tools and pipelines that improve metadata, reproducibility and peer-review workflows.\n\nAnd you are also qualified for other programming jobs outside of Life Scientists! Have a look for boot camps and graduate schemes, or do a job search using the keyword “python”."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LS6036 Python Course",
    "section": "",
    "text": "Throughout Teaching Block 1 you will be learning programming using the Python language.\nAdvances in Life Sciences has let to the creation of terrabytes of Big Data. We can now sequence millions of bases of DNA, calculate expression levels of thousands of proteins and track the movements of whales around the world. In order to be able to make sense of these large datasets, we use programming languages. It would be quite difficult to calculate a statistically significant result if your dataset has more than 1000 values!\nYou will have already done some programming using R - python is similar is several ways, but is much more flexible.\n\n\nR is a very specialised language used within Life Sciences. It is excellent for some specific tasks - primarily using statistical tests, making very nicely styled graphs, and making geographical maps.\nPython is much more flexible - it has much wider uses and is in fact the most popular programming language. Learning python also helps you learn the programming fundamentals, which make it much easier to learn other languages in the future (such as Javascript and HTML for web development).\nThere’s a huge amount of tools written in python, which also means you don’t need to rewrite everything from scratch. There are python libraries for almost anything, from scientific calculations to plotting to machine learning.\n\n\n\nBelow is a table of a recent publication for each subject which used python in the analysis - quite varied!\n\nLife Science Python Programming Examples. Images from Google and Adobe Stock\n\n\n\n\n\n\n\nDegree\nPaper title\nIcon\n\n\n\n\nBiochemistry\nAutomatic Identification of Potential Cellular Metabolites for Untargeted NMR Metabolomics\n\n\n\nGenetics and Molecular Biology\nScreening of MYB1R1 interaction with LDOX promoter to regulate anthocyanin biosynthesis in peaches\n\n\n\nPharmacology\nDevelopment of an Artificial Intelligence Powered Medication Risk Score Calculator Application\n\n\n\n\n\n\n\nIn Teaching Block 2 you’ll be doing a bioinformatics project. It is up to you whether or not to use python, or to use the online bioinformatics tools you’ll be shown in TB2.\nYou may also end up using python for your LS6014 project if you need to do some data analysis!\n\n\n\nFirst get yourself set up with Python and VSCode or Google Colab - click the “Set Up” tab for instructions.\nNext start the classes under the “Learn” tab. The material for the first few weeks is already available - you can work through them at your own pace.\nEach page will cover a new concept, or have an activity on for you to try. As you work through, try to experiment - change parts of the code examples and see if it will still work. This is how you figure out how it works.\nIf you have any other questions, grab a member of teaching staff in the session or email Dr Lizzie Wadsworth at L.Wadsworth@kingston.ac.uk\n\n\n\nGIF from TV show that says “Is that some sort of code”"
  },
  {
    "objectID": "index.html#why-python-and-not-r",
    "href": "index.html#why-python-and-not-r",
    "title": "LS6036 Python Course",
    "section": "",
    "text": "R is a very specialised language used within Life Sciences. It is excellent for some specific tasks - primarily using statistical tests, making very nicely styled graphs, and making geographical maps.\nPython is much more flexible - it has much wider uses and is in fact the most popular programming language. Learning python also helps you learn the programming fundamentals, which make it much easier to learn other languages in the future (such as Javascript and HTML for web development).\nThere’s a huge amount of tools written in python, which also means you don’t need to rewrite everything from scratch. There are python libraries for almost anything, from scientific calculations to plotting to machine learning."
  },
  {
    "objectID": "index.html#how-is-this-used-in-biochemistry-genetics-molecular-biology-and-pharmacology",
    "href": "index.html#how-is-this-used-in-biochemistry-genetics-molecular-biology-and-pharmacology",
    "title": "LS6036 Python Course",
    "section": "",
    "text": "Below is a table of a recent publication for each subject which used python in the analysis - quite varied!\n\nLife Science Python Programming Examples. Images from Google and Adobe Stock\n\n\n\n\n\n\n\nDegree\nPaper title\nIcon\n\n\n\n\nBiochemistry\nAutomatic Identification of Potential Cellular Metabolites for Untargeted NMR Metabolomics\n\n\n\nGenetics and Molecular Biology\nScreening of MYB1R1 interaction with LDOX promoter to regulate anthocyanin biosynthesis in peaches\n\n\n\nPharmacology\nDevelopment of an Artificial Intelligence Powered Medication Risk Score Calculator Application"
  },
  {
    "objectID": "index.html#will-i-need-to-use-python-in-my-project",
    "href": "index.html#will-i-need-to-use-python-in-my-project",
    "title": "LS6036 Python Course",
    "section": "",
    "text": "In Teaching Block 2 you’ll be doing a bioinformatics project. It is up to you whether or not to use python, or to use the online bioinformatics tools you’ll be shown in TB2.\nYou may also end up using python for your LS6014 project if you need to do some data analysis!"
  },
  {
    "objectID": "index.html#what-should-i-be-doing",
    "href": "index.html#what-should-i-be-doing",
    "title": "LS6036 Python Course",
    "section": "",
    "text": "First get yourself set up with Python and VSCode or Google Colab - click the “Set Up” tab for instructions.\nNext start the classes under the “Learn” tab. The material for the first few weeks is already available - you can work through them at your own pace.\nEach page will cover a new concept, or have an activity on for you to try. As you work through, try to experiment - change parts of the code examples and see if it will still work. This is how you figure out how it works.\nIf you have any other questions, grab a member of teaching staff in the session or email Dr Lizzie Wadsworth at L.Wadsworth@kingston.ac.uk\n\n\n\nGIF from TV show that says “Is that some sort of code”"
  },
  {
    "objectID": "worksheets/nested_lists_and_dictionaries.html",
    "href": "worksheets/nested_lists_and_dictionaries.html",
    "title": "Nested lists and dictionaries",
    "section": "",
    "text": "When we have a bit more information to store, sometimes we may want to use a dictionary where each value is a list, or a dictionary inside a dictionary, or a list inside another list.\nIf we want to get a value from inside the inner list or dictionary, we can use two pairs of square brackets:\n\nDictionaryName [FirstKey] [SecondKey]\n\n\n# Define a dictionary\ndictionary_name = {\n    # Define a second dictionary as a value\n    \"Key\": {\n        \"Second Key\": 42\n    }\n}\n# Print the inside value using both keys \nprint(dictionary_name[\"Key\"][\"Second Key\"])\n\n42\n\n\nDictionaries (and lists) can contain both lists and dictionaries as values or a combination of different types.\n\n\n\nGraphic of a nested dictionary with integers or strings, lists and dictionaries as the values\n\n\nSee the below examples for a dictionary of lists, dictionary of dictionaries and list of lists.\n\nDictionary of listsDictionary of dictionariesList of lists\n\n\nIn this example we have a dictionary of students, and each name gives us a list of exam grades.\nTo get the mark for a particular exam, we use student_grades[key][index] where their name is the dictionary key, and which module is the list index.\n\n# Define dictionary of students \nstudent_grades = {\n    # Each key is a student name, each value is a list of module marks\n    \"Wednesday\": [89, 72, 65, 68, 75],\n    \"Enid\": [48, 55, 58, 62, 62],\n    \"Bianca\": [55, 58, 62, 62, 58],\n} # close outside dictionary\n\n# Print the mark for module 3 for student 208077\n# Third module in the list is index 2, so need to use student_ID_dict[208077][2]\nchosen_student = \"Bianca\" # store ID of student in variable so can change it easily\nprint(f\"Student {chosen_student} in module 3 got a mark of {student_grades[chosen_student][2]}\")\n\nStudent Bianca in module 3 got a mark of 62\n\n\nSee below visualisation of what we did:\n\nchosen_student = \"Bianca\"\n        │\n        ▼\nstudent_grades[chosen_student] → [55, 58, 62, 62, 58]\n                                  │\n                                  ▼\n                         [2] → 62  (mark for module 3)\n\n\n\nIn this example we have a dictionary of students, and each name gives us more information about each student.\n\n# Define dictionary of students \nNevermore_students = {\n    # Define dictionary for each student \n    \"Wednesday\": {\n        \"Name\": \"Wednesday Addams\",\n        \"Outcast\": True,\n        \"Power\": \"Psychic\", \n        \"Favourite color\": \"Black\"\n    }, \n\n    \"Enid\": {\n        \"Name\": \"Enid Sinclair\",\n        \"Outcast\": True,\n        \"Power\": \"Werewolf\", \n        \"Favourite color\": \"Pink\"\n    }, \n    \n    \"Bianca\": {\n        \"Name\": \"Bianca Barclay\",\n        \"Outcast\": True,\n        \"Power\": \"Siren\", \n        \"Favourite color\": \"Blue\"\n    }\n} # close outside dictionary\n\n# Print the information for Enid \n# Nevermore_students[\"Enid\"] gives the whole Enid dictionary\n# Nevermore_students[\"Enid\"][\"Power\"] gives \"Werewolf\"\n\nchosen_student = \"Enid\"\nprint(f\"Student {Nevermore_students[chosen_student][\"Name\"]} has the power {Nevermore_students[chosen_student][\"Power\"]}\")\n\nStudent Enid Sinclair has the power Werewolf\n\n\nSee below visualisation of what we did:\n\nchosen_student = \"Enid\"\n        │\n        ▼\nNevermore_students[chosen_student]\n        │\n        ▼\n{ \"Name\": \"Enid Sinclair\",\n  \"Outcast\": True,\n  \"Power\": \"Werewolf\",\n  \"Favourite color\": \"Pink\" }\n        │\n        ├─ [\"Name\"]  →  \"Enid Sinclair\"\n        └─ [\"Power\"] →  \"Werewolf\"\n\n\n\nYou can also have lists of lists. Here we have a list of items in a shop, separated into categories.\n\n# Define outside list \nshop_contents = [\n    ['apples', 'bananas', 'oranges', 'kiwis', 'grapes'], # fruits\n    ['USB-C', 'iPhone'], # chargers\n    ['hay', 'millet', 'collar', 'bell', 'dog food', 'cat food'], # pet food  \n    ['toilet roll', 'kitchen roll', 'sponges', 'washing up liquid'] # essentials \n] # close outside list \n\n# You can print a particular item in the list by using shop_contents[index][index]\nprint(f\"We have {shop_contents[2][0]} in stock\")\n\nWe have hay in stock\n\n\nSee below visualisation for what we did:\n\nshop_contents[2][0]\n              │  │\n              │  └── index 0 → \"hay\"\n              │\n              └── index 2 → ['hay', 'millet', 'collar', \n              'bell', 'dog food', 'cat food']\n\nResult:\n\"We have hay in stock\"\n\nWe could also use an if statement to check if something is in the relevant list:\n\n# You could also search a list in an if statement \ncheck_stock = \"kiwis\"\nif check_stock in shop_contents[0]: \n    print(f\"{check_stock} are in stock\")\nelse:\n    print(f\"{check_stock} are not in stock\")\n\nkiwis are in stock",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Nested lists and dictionaries"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_intro.html",
    "href": "worksheets/matplotlib_intro.html",
    "title": "Matplotlib line graph",
    "section": "",
    "text": "Matplotlib is a library - it has a set of tools that we can use; python code that has already been written for us!\nThis short example will create a very simple line graph:\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting x values against y values \nplt.plot(x, y)\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib line graph"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_intro.html#give-it-a-go",
    "href": "worksheets/matplotlib_intro.html#give-it-a-go",
    "title": "Matplotlib line graph",
    "section": "Give it a go:",
    "text": "Give it a go:\n\nReplace one of the x and y values with another number.\nChange the order of numbers in the x list\nAdd an extra number to the x list and not the y list (so x has 4 values and y has 3). What’s the error here?\nAdd more numbers to both lists",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib line graph"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_xyticks.html",
    "href": "worksheets/matplotlib_xyticks.html",
    "title": "Matplotlib xy ticks",
    "section": "",
    "text": "In all the examples so far, matplotlib has estimated what it wants the x and y ticks to be. These are the marks on the x and y axis (0, 10, 20 etc.).\nFor numerical values this is automatic, but sometimes we might want to change them.\nWith plt.xticks() or plt.yticks() you can give a list of values (where you want the ticks to be drawn), and also a list of labls (what you want the ticks to be labelled as).\nSee below examples:\n\nChoose ticksRelabel ticksStrings as ticks\n\n\nIn this example, only three values on the x axis are chosen to be displayed on the graph.\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting x values against y values \nplt.plot(x, y)\n\n# Only mark 0, 0.5 and 1 on the X axis\nplt.xticks([0, 0.5, 1])\n\n# View the created graph\nplt.show()\n\n\n\n\n\n\n\n\n\n\nIn this example, the y axis is relabelled to spell “Hello!”.\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting x values against y values \nplt.plot(x, y)\n\n# Change the yticks to say \"Hello\"\nrange_of_ticks = range(10, 4, -1)\nlabels_of_ticks = [\"H\", \"e\", \"l\", \"l\", \"o\", \"!\"]\nplt.yticks(range_of_ticks, labels = labels_of_ticks)\n\n# View the created graph\nplt.show()\n\n\n\n\n\n\n\n\n\n\nIf you have strings, such as dates, these will all plot by default which will look really busy. So using x or y ticks, you can choose which ones you want to plot and also rename them as necessary.\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\ndates = [\"01/01/25\", \"10/01/25\", \"20/01/25\", \"01/02/25\", \"10/02/25\", \"31/02/25\", \"01/03/25\", \"10/03/25\", \"20/03/25\", \"01/04/25\"]\ncakes_eaten = [5, 8, 10, 4, 7, 9, 3, 14, 8, 12]\n\n# Plotting x values against y values \nplt.plot(dates, cakes_eaten)\n\n# Change the yticks to say \"Hello\"\nlist_of_ticks = [\"01/01/25\", \"01/02/25\", \"01/03/25\", \"01/04/25\"]\nlabels_of_ticks = [\"January\", \"February\", \"March\", \"April\"]\nplt.xticks(list_of_ticks, labels = labels_of_ticks)\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib xy ticks"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_xy_limits.html",
    "href": "worksheets/matplotlib_xy_limits.html",
    "title": "Matplotlib xy limits",
    "section": "",
    "text": "Matplotlib automatically detects what values are plotted, and draws axis that displays all the points.\nHowever, sometimes we may want to force the x and y axis plot a certain region - e.g. 0-100% on a y axis.\nWe can do this by setting plt.xlim() or plt.ylim().\n\n# Import matplotlib\nimport matplotlib.pyplot as plt \n\n# Define lists \nspecies = [\"Voles\", \"Frogs\", \"Otters\", \"Nematodes\", \"Eels\"]\npercent_survival = [10, 39, 1, 22, 5]\n\n# plot as a bar chart \nplt.bar(species, percent_survival)\n\n# set ylim to between 0 and 100\nplt.ylim(0,100)\n\n# show graph \nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib xy limits"
    ]
  },
  {
    "objectID": "worksheets/List_slicing.html",
    "href": "worksheets/List_slicing.html",
    "title": "List slicing",
    "section": "",
    "text": "We can also do list slicing, where we retrieve multiple elements from a list. We can give up to three values when retrieving information from a list:\nList_name [ start : stop : step ]\nFor example, the below code gives every third item from the 2nd to the 8th item in the list.\nnumbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven']\n\n# Printing the 2nd and 11th items from the list using the index \nprint(f\"numbers[1] is {numbers[1]}\")\nprint(f\"numbers[10] is {numbers[10]}\")\n\n# Printing every third item from the 2nd to the 11th items in the list\nprint(f\"numbers [ 1 : 10 : 3 ] is {numbers [ 1 : 10 : 3 ]}\" )\n\nnumbers[1] is two\nnumbers[10] is eleven\nnumbers [ 1 : 10 : 3 ] is ['two', 'five', 'eight']\nWhy isn’t 'eleven' included on the final print statement?",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List slicing"
    ]
  },
  {
    "objectID": "worksheets/List_slicing.html#give-it-a-go",
    "href": "worksheets/List_slicing.html#give-it-a-go",
    "title": "List slicing",
    "section": "Give it a go:",
    "text": "Give it a go:\nWith your list of names of your peers, try:\n\n#Try the following with your list of names: \n\n# replace with your list of names\nnames = [ \"Luffy\" , \"Zoro\" , \"Nami\" , \"Sanji\"]\n\n# try these one at a time\nprint(names[1])\nprint(names[-1])\nprint(names[4-2])\nprint(len(names))\nprint(names[1:5])\nprint(names[1:5:2])\nprint(names[:5:2])\nprint(names[3:])\nprint(names[:3])\nprint(names[::-1])\n\nDo you understand what each line is doing?",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List slicing"
    ]
  },
  {
    "objectID": "worksheets/ifmuseumdiscount.html",
    "href": "worksheets/ifmuseumdiscount.html",
    "title": "Museum discount activity",
    "section": "",
    "text": "Museum discount activity\nBuild this program one step at a time, checking part 1 works before moving onto part 2…\nA museum needs you to write a program to decide if a visitor is entitled to a reduction in the price of the ticket. The program should start by asking what the age of the visitor is.\nYour program should:\n\nAsk the user to input their age\nprint ‘Reduced’ if the visitor is under 26 years old\nAlso print ‘Reduced’ if the visitor is over 60 years old\nprint ‘Full price’ if the visitor is not eligible for a discount\n\n\n\n\n\n\n\nNoteShow hint\n\n\n\n\n\nThe function input() will always give you a string. Make sure you convert this to an integer or a float before doing your if statements.\n\n\n\n © [SyedaAroosha] / Adobe Stock",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "Museum discount activity"
    ]
  },
  {
    "objectID": "worksheets/List_index.html",
    "href": "worksheets/List_index.html",
    "title": "List index",
    "section": "",
    "text": "You can extract items from a list using the index - the numerical position of the item in the list. As lists have a defined order, you can extract, for example, the third item in the list.\nTry below, does this give you the result you’re expecting?\n\n\n\n\n\n\nPython starts counting at 0, so index 3 is the number ‘four’ in the above example.\nThis means the indexes for the above number are:\nnumbers[0] = the first number = ‘one’\nnumbers[1] = the second number = ‘two’\nnumbers[2] = the third number = ‘three’\nnumbers[3] = the forth number = ‘four’\nnumbers[4] = the fifth number = ‘five’\nnumbers[5] = out of range = IndexError\nOutput: \"The third number is four\"\n\n\n\nVisual representation of the list index",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List index"
    ]
  },
  {
    "objectID": "worksheets/Logic.html",
    "href": "worksheets/Logic.html",
    "title": "Logic",
    "section": "",
    "text": "There are three logical operators we can use with booleans:\nLet’s test it on the example - do you buy ice cream if it’s sunny and (or) if you’re hungry?\nWhat will the below code give you?",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "Logic"
    ]
  },
  {
    "objectID": "worksheets/Logic.html#be-careful---sneaky-errors",
    "href": "worksheets/Logic.html#be-careful---sneaky-errors",
    "title": "Logic",
    "section": "Be careful - sneaky errors!",
    "text": "Be careful - sneaky errors!\nDoes this print out what you expect?\n\n# Testing if letters \"z\" and \"f\" in string\nmy_string = \"find the One Piece\" \n\nif \"z\" and \"f\" in my_string: \n  print(f\"both z and f are in string {my_string}\")\nelse:\n  print(f\"z and f are not both in string {my_string}\")\n\nboth z and f are in string find the One Piece\n\n\n\n\n\n\n\n\nTipShow explanation\n\n\n\n\n\nThe issue is with if \"z\" and - this is True if \"z\" is a non empty string!\nTo test whether both z and f are in the string, you need to type it out explicitly\nif \"z\" in my_string (search for “z” in my_string) and if \"f\" in my_string (search for “f” in my_string)\n\nif \"z\" in my_string and \"f\" in my_string: \n  print(f\"both z and f are in string {my_string}\")\nelse:\n  print(f\"z and f are not both in string {my_string}\")",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "Logic"
    ]
  },
  {
    "objectID": "worksheets/forloops.html",
    "href": "worksheets/forloops.html",
    "title": "The for loop",
    "section": "",
    "text": "One of the benefits of programming is automation. For example, imagine we have a list of DNA sequences, and we want to see which ones contain a start codon “ATG”. If we had 10 sequences we could manually search for them - but it would be a lot harder if we had 10,000 sequences!\nWe can use a for loop to test every item in our list for if it contains “ATG”.\n# Put sequences in a list\nSequences = [\n  \"AAGATGGGCCAT\", \n  \"GGGCTATGCAC\", \n  \"TTTTACCGTAATAG\"\n]\n\n# loop through every sequence\nfor dna in Sequences:\n    if \"ATG\" in dna:\n        print(f\"{dna} contains a start codon\")\n    else:\n        print(f\"{dna} does not contain a start codon\")\nThe way this is working is by using a temporary variable dna. We then go through every item in the list Sequences, and replace this temporary variable with each item.\nOnce we reach the end of the loop (when there is no more indentation), the code repeats with the next item in the list.",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "The for loop"
    ]
  },
  {
    "objectID": "worksheets/forloops.html#animation-of-the-for-loop",
    "href": "worksheets/forloops.html#animation-of-the-for-loop",
    "title": "The for loop",
    "section": "Animation of the for loop",
    "text": "Animation of the for loop\n\n\n  Play\n  Pause\n  Restart\n  idle\n\n\n\n\nSequences = [\n  \"AAGATGGGCCAT\", \n  \"GGGCTATGCAC\", \n  \"TTTTACCGTAATAG\"\n]\n\nfor dna in Sequences:\n    if \"ATG\" in dna:\n        print(f\"{dna} contains a start codon\")\n    else:\n        print(f\"{dna} does not contain a start codon\")\n\n\n\n\n  Output\n  \n\n\n\n\n\nAnimation generated by ChatGPT",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "The for loop"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_linestyle.html",
    "href": "worksheets/matplotlib_linestyle.html",
    "title": "Matplotlib linestyle",
    "section": "",
    "text": "When we use plt.plot() we create a line graph, and we can also change the linestyle.\nThere are four options:\n\n-: Solid line\n:: Dotted line\n--: Dashed ———-\n-.: Dash dot ———-\n\nYou can apply to each line separately, see below example:\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values for first line\nx_line1 = [0, 1, 2]\ny_line1 = [10, 5, 8]\n\n# Make a list of x values and y values for second line\nx_line2 = [2, 1.5, 0.5]\ny_line2 = [7, 9, 6]\n\n# Plotting line1 with a solid line\nplt.plot(x_line1, y_line1, linestyle = '-')\n\n# Plotting line2 with a dotted line\nplt.plot(x_line2, y_line2, linestyle = ':')\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib linestyle"
    ]
  },
  {
    "objectID": "worksheets/UserInput_DataTypes.html",
    "href": "worksheets/UserInput_DataTypes.html",
    "title": "Input data types",
    "section": "",
    "text": "The returned result of input() will always be a string…\nTry the below example - it should give you an error!\n# Calculate users age in 10 years\nuser_age = input(\"What is your age? \")\nfuture_age = user_age + 10\nprint(\"In ten years you will be \", future_age)\nYou should get the error:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 future_age = user_age + 10\n\nTypeError: can only concatenate str (not \"int\") to str\nThis is because the age the user types in - although the user probably used digits, such as 32, - is read into python by the input() function as a string.\nTo change a string to a numerical value, so that we can do things like addition, we need to use the int() or float() functions.\nExamples of different functions to use data types is found below:\n# Change from a string to an integer using str()\nmy_string = \"10\"\nmy_int = int(my_string)\nprint (my_int, \"is of type\", type ( my_int ))\n\n# Change from a string to a floating point number using float()\nmy_string = \"10.5\"\nmy_float = float(my_string)\nprint (my_float, \"is of type\", type ( my_float ))\n\n# Change from an integer to a string using str()\nmy_int = 10\nmy_string = str(my_int)\nprint (my_string, \"is of type\", type ( my_string ))",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "Input data types"
    ]
  },
  {
    "objectID": "worksheets/UserInput_DataTypes.html#give-it-a-go",
    "href": "worksheets/UserInput_DataTypes.html#give-it-a-go",
    "title": "Input data types",
    "section": "Give it a go:",
    "text": "Give it a go:\nWrite a python program which:\n\nAsks the user which year they were born\nCalculates how old they will be in the year 3000\nPrints this information back to the user\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Get user birth year using input()\nuser_birth_year = input(\"What year were you born?\")\n\n# Convert birth year to integer\nuser_birth_year = int(user_birth_year)\n\n# Calculate age in the Year 3000\nuser_year_3000_age = 3000 - user_birth_year \n\n# Print result\nprint(\"In the year 3000 you will be: \", user_year_3000_age)",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "Input data types"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_boxplot.html",
    "href": "worksheets/matplotlib_boxplot.html",
    "title": "Matplotlib boxplot",
    "section": "",
    "text": "Single boxplotMultiple boxplots\n\n\nWe can make a single boxplot using plt.boxplot()\n\nimport matplotlib.pyplot as plt\n\ndrug_1 = [98, 100, 97, 89, 92, 75]\n\nsurvival_rates = [drug_1]\n\nplt.boxplot(survival_rates)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nWe can plot multiple boxplots together by using a list of lists.\n\nimport matplotlib.pyplot as plt\n\ndrug_1 = [98, 100, 97, 89, 92, 75]\ndrug_2 = [76, 75, 88, 72, 67, 64]\ndrug_3 = [75, 88, 82, 69, 98, 54]\n\nsurvival_rates = [drug_1, drug_2, drug_3]\n\nplt.boxplot(survival_rates)\n\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib boxplot"
    ]
  },
  {
    "objectID": "worksheets/Range.html",
    "href": "worksheets/Range.html",
    "title": "Ranges",
    "section": "",
    "text": "Python has a useful built-in range() function for generating ranges of values.\nIt’s useful for generating ranges for definite iteration (that’s where you know when you start your loop how many iterations you’re going to do). In Python that means the for loop.\nThe range() function can take one, two, or three arguments:\nYou choose whichever version best fits the problem you’re solving. If you have a choice, use the simplest one.\nRun the code below. Can you see why these three all do the same thing?\nPython’s ranges are lazy (it’s a technical term): it means that Python is not printing out the values of those ranges because it knows you haven’t actually asked to look at any of them. It knows the range but won’t bother actually enumerating the values until it really needs to. This is helpful when you have big numbers; it can result in more efficient programs that don’t require so much memory.\nYou can print the numbers out using a for loop:",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "Ranges"
    ]
  },
  {
    "objectID": "worksheets/Range.html#give-it-a-go",
    "href": "worksheets/Range.html#give-it-a-go",
    "title": "Ranges",
    "section": "Give it a go:",
    "text": "Give it a go:\nWrite a program that asks for an integer n and, using range(), prints the following:\n\nthe sum of all integer from 1 to n\nthe sum of all even integers from 1 to n\nthe sum of all multiples of 3 from 1 to n\n\nHint: use a different range() for each one of those.\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Example user int of 5, try using input() function\nuser_int = 5\n\n# sum of all integers from 1 to n\nmy_sum_1_n = 0\nfor i in range(1, user_int+1, 1):\n  my_sum_1_n = my_sum_1_n + i\n# exit loop to print final result\nprint(f\"Sum of integers from 1 to n is {my_sum_1_n}\")\n\n# sum of all even integers from 1 to n\nmy_sum_2_n = 0\nfor i in range(2, user_int+1, 2):\n  my_sum_2_n = my_sum_2_n + i\nprint(f\"Sum of even integers from 1 to n is {my_sum_2_n}\")\n\n# sum of all multiples of 3 from 1 to n\nmy_sum_3_n = 0\nfor i in range(3, user_int+1, 3):\n  my_sum_3_n = my_sum_3_n + i\nprint(f\"Sum of multiples of 3 from 1 to n is {my_sum_3_n}\")\n\nSum of integers from 1 to n is 15\nSum of even integers from 1 to n is 6\nSum of multiples of 3 from 1 to n is 3",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "Ranges"
    ]
  },
  {
    "objectID": "worksheets/ifelse_conditions.html",
    "href": "worksheets/ifelse_conditions.html",
    "title": "If and else conditions",
    "section": "",
    "text": "See below table for a list of conditions that you can use with an if statement.\nThe condition always goes between if and : and is evaluated to be True or False.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If and else conditions"
    ]
  },
  {
    "objectID": "worksheets/ifelse_conditions.html#give-it-a-go",
    "href": "worksheets/ifelse_conditions.html#give-it-a-go",
    "title": "If and else conditions",
    "section": "Give it a go:",
    "text": "Give it a go:",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If and else conditions"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_titles.html",
    "href": "worksheets/matplotlib_titles.html",
    "title": "Matplotlib titles",
    "section": "",
    "text": "We can add a title to our graphs, and labels to our x and y axis, so that anyone can see what our graphs are showing.\nWe can add a title with plt.title() and x and y axis labels with plt.xlabel() and plt.ylabel().\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [3, 1, 2.5]\ny = [7,4, 9]\n\n# Plotting x values against y values \nplt.scatter(x, y, marker=\"*\", s=200, color=\"darkorchid\")\n\n# Add a title \nplt.title(\"Example scatter graph\")\n\n# Label the x and y axis\nplt.xlabel(\"This is the x axis\")\nplt.ylabel(\"This is the y axis\")\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib titles"
    ]
  },
  {
    "objectID": "worksheets/reading_from_a_file.html",
    "href": "worksheets/reading_from_a_file.html",
    "title": "Reading from a file",
    "section": "",
    "text": "Now we know how to use loops, we can use this to read from a file.\nDownload the following file, and add that to the folder where you have your python files:\nIn this file, every line contains an object. The second word on each line is either:\nWe can read this file in python using the following code:\n# Use with to open the file\nwith open(\"Land_of_zog.txt\") as f: \n    # read the lines using readlines() and save to a list\n    lines = f.readlines()\n\n# print the first 5 lines of the list\nprint(lines[0:5])\n['door exist\\n', 'ball none\\n', 'broom exist\\n', 'mirror none\\n', 'floor exist\\n']\nThis creates a list where every line in the file is an item in the list. Notice how every line ends with \\n - this is a newline character, which marks where each line ends.\nWe can then use a for loop to go through each line of the file:\n# loop through every line in the list \nfor line in lines: \n    # .strip() removes the \\n character \n    # .split() splits the line into a list at each space\n    items = line.strip().split()\n    print(items)\n['door', 'exist']\n['ball', 'none']\n['broom', 'exist']\n['mirror', 'none']\n['floor', 'exist']",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Reading from a file",
      "Reading from a file"
    ]
  },
  {
    "objectID": "worksheets/reading_from_a_file.html#give-it-a-go",
    "href": "worksheets/reading_from_a_file.html#give-it-a-go",
    "title": "Reading from a file",
    "section": "Give it a go",
    "text": "Give it a go\nCan you expand this example so that:\n\nAll of the items that exist are printed together\nAll of the items that don’t exist are printed together\n\nCan you figure out what the rule is? Why do some items exist and others don’t?\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nWe can use an if statement to collect a list of things that exist and list of things that don’t, and print these out.\n\n# Use with to open the file\nwith open(\"Land_of_zog.txt\") as f: \n    # read the lines using readlines() and save to a list\n    lines = f.readlines()\n\n\n# make lists to store results\nexist_list = []\nnone_list = []\n\nfor line in lines: \n    # .strip() removes the \\n character \n    # .split() splits the line into a list at each space\n    items = line.strip().split()\n    # if statment to determine if exists or not\n    if items[1] == \"exist\":\n        # add item to exist list\n        exist_list.append(items[0])\n    elif items[1] == \"none\":\n        # add item to none list\n        none_list.append(items[0])\n\n# print results\nprint(f\"Items that exist: {exist_list}\")\nprint(f\"Items that do not exist: {none_list}\")\n\n\n\nItems that exist: ['door', 'broom', 'floor', 'book', 'roof', 'toothbrush', 'boot', 'balloon', 'stool', 'toothpaste', 'room', 'spoon', 'doorbell', 'hook', 'foot', 'moon', 'loop', 'floorboard', 'bookcase', 'doorway', 'broomstick']\nItems that do not exist: ['ball', 'mirror', 'plate', 'bucket', 'lamp', 'cushion', 'drawer', 'table', 'cup', 'window', 'desk', 'chair', 'wall', 'coat', 'fork', 'pillow', 'bottle', 'cabinet', 'blanket', 'curtain', 'comb', 'carpet', 'shelf', 'brush', 'sofa', 'bag', 'frame']\n\n\nCan you spot the similarities in the words which exist in the Land of Zog?",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Reading from a file",
      "Reading from a file"
    ]
  },
  {
    "objectID": "worksheets/Maths.html",
    "href": "worksheets/Maths.html",
    "title": "Maths",
    "section": "",
    "text": "We’ve looked at saving a numerical value (integer or float) as a variable. Next we can look at doing mathematics in python. Table 2 contains example code for different mathematical operations and how we write them.\nTry the below code, and then change the mathematical operator as in the above Table. Does the result that prints out match what you expect?",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Maths"
    ]
  },
  {
    "objectID": "worksheets/Maths.html#order-of-operations",
    "href": "worksheets/Maths.html#order-of-operations",
    "title": "Maths",
    "section": "Order of operations",
    "text": "Order of operations\nIn python, arithmetic operations always occur in the following order:\n\nExponential **\nMultiplication * or division (/ or // or % )\nAddition + or subtraction -\n\nWhere there is two operations of the same level (eg. one * and one / ) then the order depends on which comes first.\nJust like in mathematics, we can use brackets ( ) to highlight which operations should be done first.\nWhat would be the result of the following equations in python? Calculate them manually (without python) first.\n\n4 - 3 * 5 + 6\n4 - ( 3 * 5 ) + 6\n(4 - 3) * 5 + 6\n\n4 - (3 * 5 + 6)\n4 - 3.0 * 5 + 6\n4. - ( 3 * 5 ) + 6\n(4 + 2) / 5 + 6\n\n4 // (3 * 5 + 6.)\n\nNow try the above in python. You can do this using print() like in the example below. Were your predictions correct?\n\n\n\n\n\n\nNote: In Python, you can mix integers and floats in the same arithmetic expression. The type of the evaluation will be a float.\n\n\n\n\n\n\nTipSide note: Rounding errors\n\n\n\n\n\nA float is any number with a decimal point, whereas an integer is a whole number (eg. 5.0 is a float and 5 is an integer)\nIn python, there’s something a little unusual about mathematical calculations with floats…\nTry:\n\n\n\n\n\n\nDid you get what you expected? What do you think is going on here?\nConfused? This is to do with how the hardware stores numbers in binary - it isn’t a bug with the python code. You can check out more in this geeks for geeks article.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Maths"
    ]
  },
  {
    "objectID": "worksheets/Adding_number_string.html",
    "href": "worksheets/Adding_number_string.html",
    "title": "Adding to numbers and strings",
    "section": "",
    "text": "We can add two numbers together, or two strings together, but in the examples so far we’ve always saved the result in a new variable.\nWhy doesn’t the below code change the variable value?\n\n# Create variable \na = 20\n# Add to variable \na + 100 \n# Print variable at the end\nprint(f\"Variable a is {a}\")\n\nVariable a is 20\n\n\nThis is because we added to our variable, but we didn’t save the result anywhere.\nSo python did the calculation. But didn’t save the result - we didn’t tell it to replace the value of a.\nIf we want to change the value of the variable, we can save the result as a. This will overwrite the previous value.\n\na = a + 100\n\nWe can also use the shorthand += to do the same thing:\n\na += 100\n\nCheck out the examples below:\n\nNumber example 1Number example 2String example 1String example 2\n\n\n\n# Create variable \na = 20\n# Add to variable \na += 100 \n# Print variable at the end\nprint(f\"Variable a is {a}\")\n\nVariable a is 120\n\n\n\n\n\n# Create variable \na = 105\n# Add to variable \na -= 23.4 \n# Print variable at the end\nprint(f\"Variable a is {a}\")\n\nVariable a is 81.6\n\n\n\n\n\n# Create variable \nstring1 = \"Hello\"\n# Add to variable \nstring1 += \" world\" \n# Print variable at the end\nprint(f\"String 1 is {string1}\")\n\nString 1 is Hello world\n\n\n\n\n\n# Create variable \nstring1 = \"29\"\n# Add to variable \nstring1 += \"100\" \n# Print variable at the end\nprint(f\"String 1 is {string1}\")\n\nString 1 is 29100",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "Adding to numbers and strings"
    ]
  },
  {
    "objectID": "worksheets/UserInput.html",
    "href": "worksheets/UserInput.html",
    "title": "User input",
    "section": "",
    "text": "Python allows for user input, using the function input().\nThis means we can write a program which asks the user (whoever is running the program) to input some data which we will then use in our code.\nLike with print(), anything we put inside the brackets () will be printed as a message in the output.\nHowever, the code will then stop running until the user has entered some data and pressed the enter key on their keyboard.\nThe data the user enters is then returned from the input function. This means we can save it in a variable.\nTry the below example:\n\n# Ask for user's name \nuser_name = input(\"What is your name? \")\nprint(\"Your name is\", user_name)\n\nYou type in your input in the output region:\n\nVisual Studio CodeGoogle Colab\n\n\n\n\n\nVSCode User Input Screencast\n\n\n\n\n\n\n\nColab User Input Screencast",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "User input"
    ]
  },
  {
    "objectID": "worksheets/while_bools.html",
    "href": "worksheets/while_bools.html",
    "title": "What can we use while with?",
    "section": "",
    "text": "Our while loops can use any expression that will give a boolean True or False, such as what we use with an if statement.\nSome of the more common while loops include:\n\nSetting a variable to True and changing it to False when a condition is met\nSetting a variable to False and changing it to True when a condition is met (using while not)\nComparing two numerical variables\n\nSee examples below:\n\nBoolean example 1Boolean example 2Boolean example 3\n\n\n\nkeep_going = True \n\nwhile keep_going:\n    user_choice = input(\"Should we keep going?\") \n    if user_choice == \"no\":\n        keep_going = False \n\n\n\n\nstop_loop = False \n\nwhile not stop_loop:\n    user_choice = input(\"Should we keep going?\") \n    if user_choice == \"no\":\n        stop_loop = True \n\n\n\n\n# Create list\nmy_list = [\"pikachu\", \"eevee\", \"psyduck\", \"mew\", \"jigglypuff\"]\n# Set initial index\ni = 0\n\nwhile i &lt; len(my_list):\n    # print pokemon\n    print(f\"Pokemon {i} is {my_list[i]}\")\n    # Add 1 to index \n    # !IMPORTANT! - if you don't do this you'll get a neverending loop\n    i += 1"
  },
  {
    "objectID": "worksheets/matplotlib_colors.html",
    "href": "worksheets/matplotlib_colors.html",
    "title": "Matplotlib colours",
    "section": "",
    "text": "You can also change the colour of the graph using the color option.\nWe do need to use the American spelling here, I am sorry…\nHere we use the base color r to make the graph red:\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting x values against y values \n# Set color to red\nplt.plot(x, y, color=\"r\")\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib colours"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_colors.html#base-colours",
    "href": "worksheets/matplotlib_colors.html#base-colours",
    "title": "Matplotlib colours",
    "section": "Base colours",
    "text": "Base colours\nThis is the list of base colours we can refer to with one letter:",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib colours"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_colors.html#css-colours",
    "href": "worksheets/matplotlib_colors.html#css-colours",
    "title": "Matplotlib colours",
    "section": "CSS colours",
    "text": "CSS colours\nThis is a list of all named colours we can use. This is the same as above, but we put the full name in (color = \"darkorchid\")",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib colours"
    ]
  },
  {
    "objectID": "worksheets/forloop_practice.html",
    "href": "worksheets/forloop_practice.html",
    "title": "for loop practice activities",
    "section": "",
    "text": "Activity 1: 50 numbers in a listActivity 2: Reverse complementActivity 3: Average protein expression\n\n\nWrite a program that:\n\nFills a 50-element list with random integers from 1–10.\nPrints every element in the list\nCalculates and prints the sum of the random numbers in the list\n\nThen, adapt your program so that:\n\nIt asks the user for a number, and prints out the number of times that a particular number appears in the list.\n\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nYour answer may look something like this:\n\n\nMy list numbers are [5, 4, 1, 7, 6, 1, 8, 5, 10, 9, 6, 10, 8, 8, 1, 9, 4, 5, 8, 3, 9, 7, 1, 7, 9, 1, 3, 2, 7, 2, 8, 10, 5, 3, 10, 4, 2, 8, 3, 6, 9, 8, 1, 7, 5, 6, 9, 3, 7, 1]\nThe sum of these numbers is 281\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Import random package  \nimport random \n# Create empty list\nmy_list = [] \n# Use a 50 element for loop \nfor i in range(50):\n    # Choose a random number between 1 and 10\n    random_number = random.randint(1,10)\n    # Add the number to our list \n    my_list.append(random_number)\n\n# Print all the elements in the list \nprint(f'My list numbers are {my_list}') \n\n# Calculate the sum of all the numbers in the list \n# Initial value of 0 for the sum \nmy_sum = 0\n# Loop through every number in the list\nfor number in my_list:\n    # Add number to my_sum \n    my_sum += number \n\n# Exit the for loop to print the final number \nprint(f\"The sum of these numbers is {my_sum}\")\n\n\n\n\n\n\nLoop through the following sequence and create a new string containing the reverse complement.\n\nmy_sequence = \"ATCGCTCAGTCAGCTAGCCCTAAACGCGCGG\"\n\nYou’ll need to do two things here:\n\nReverse the sequence\nReplace each base with it’s complement (A with T, C with G)\n\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nYour answer may look something like this:\n\n\nThe reverse complement of \nATCGCTCAGTCAGCTAGCCCTAAACGCGCGG is \nCCGCGCGTTTAGGGCTAGCTGACTGAGCGAT\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Initial sequence\nmy_sequence = \"ATCGCTCAGTCAGCTAGCCCTAAACGCGCGG\"\n\n# Container for new sequence\nreverse_complement = \"\" \n\n# Make a dictionary to have the complement for every base\ncomplement_dict = {\n    \"A\":\"T\", \n    \"T\":\"A\",\n    \"C\":\"G\",\n    \"G\":\"C\"\n}\n\n# Loop through every base in the sequence\n# Using splicing [::-1] will go through the loop backwards (a step of -1) \nfor base in my_sequence[::-1]: \n    # calculate complement of base \n    comp_base = complement_dict[base]\n    # add comp_base to new sequence \n    reverse_complement += comp_base\n\n# print results \n# put each sequence on a new line with \\n so they line up\nprint(f\"The reverse complement of \\n{my_sequence} is \\n{reverse_complement}\")\n\n\n\n\n\n\nThe following dictionary contains a set of genes, and a list of expression levels for each genes from 5 samples.\n\ngenes_expression_dict = {\n    \"SHH\": [10.0, 14.2, 12.3, 9.4, 8.7],\n    \"HSP10\": [105.3, 121.0, 94.8, 144, 132],\n    \"HBB\": [52, 48.4, 23.5, 56.7, 67.8]\n}\n\nLoop through every protein in the dictionary, and for each protein print the mean, minimum and maximum expression levels.\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nYour answer may look something like this:\n\n\nThe gene SHH has a mean expression of 10.92\nwith a minimum of 8.7 and a maximum of 14.2\nThe gene HSP10 has a mean expression of 119.42\nwith a minimum of 94.8 and a maximum of 144\nThe gene HBB has a mean expression of 49.68\nwith a minimum of 23.5 and a maximum of 67.8\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Expression dictionary\ngenes_expression_dict = {\n    \"SHH\": [10.0, 14.2, 12.3, 9.4, 8.7],\n    \"HSP10\": [105.3, 121.0, 94.8, 144, 132],\n    \"HBB\": [52, 48.4, 23.5, 56.7, 67.8]\n}\n\n# Loop through every gene in the dictionary \nfor gene in genes_expression_dict.keys():\n    # Extract the list of expression values \n    expression_values = genes_expression_dict[gene]\n    # Calculate the mean, min and max \n    mean_expression = sum(expression_values)/len(expression_values)\n    min_expression = min(expression_values)\n    max_expression = max(expression_values)\n\n    # print findings\n    print(f\"The gene {gene} has a mean expression of {mean_expression}\\nwith a minimum of {min_expression} and a maximum of {max_expression}\")",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "for loop practice activities"
    ]
  },
  {
    "objectID": "worksheets/for_iterables.html",
    "href": "worksheets/for_iterables.html",
    "title": "What can we use for with?",
    "section": "",
    "text": "The for loop is quite clever, it looks at what the type of your variable is to figure out what to loop through.\n\nEvery item in a list\nEvery key in a dictionary (using .keys())\nEvery character in a string\nEvery number in a range\n\nHowever it can’t loop through everything, you will get an error if you use an integer or float.\nSee the examples below:\n\nList exampleDictionary exampleString exampleRange exampleInteger Error example\n\n\nLoop through every item in a list\n\n# make a list\nfruits_list = [\"apple\", \"banana\", \"orange\"]\n\n# use a for loop \nfor thingy in fruits_list:\n    print(thingy)\n\napple\nbanana\norange\n\n\n\n\n\n\n\n\nNote\n\n\n\nHere I’ve used thingy as a temporary variable - you can change this to anything you like!\nYou only need to be consistent when you then use it inside the for loop.\nSee if you can change it to something else!\n\n\n\n\nLoop through every key in a dictionary\n\n# make a list\nfruits_dict = {\n    \"apple\": \"green\", \n    \"banana\": \"yellow\", \n    \"orange\": \"orange\"\n}\n\n# use a for loop \nfor fruit in fruits_dict.keys():\n    print(f\"{fruit} is {fruits_dict[fruit]}\")\n\nfor f in fruits_dict: \n    print(f)\n\napple is green\nbanana is yellow\norange is orange\napple\nbanana\norange\n\n\n\n\nLoop through every character in a string\n\n# Make a string\nmy_string = \"Hello World!\"\n\n# use a for loop \nfor letter in my_string:\n    print(letter)\n\nH\ne\nl\nl\no\n \nW\no\nr\nl\nd\n!\n\n\n\n\nLoop through every number in a range of numbers\n\n# Define a range\nmy_range = range(10,0,-1)\n\n# use a for loop \nfor number in my_range:\n    print(number)\n\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n\n\n\n\nIntegers and floats do not work with for - python does not know what you meant to loop through! You’ll get the below TypeError:\n\nmy_integer = 7\n\n# use a for loop \nfor number in my_integer:\n    print(number)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 4\n      1 my_integer = 7\n      3 # use a for loop \n----&gt; 4 for number in my_integer:\n      5     print(number)\n\nTypeError: 'int' object is not iterable\n\n\n\nIf you want to loop through a range of numbers, you’ll need to use range()",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "What can we use for with?"
    ]
  },
  {
    "objectID": "worksheets/while_practice.html",
    "href": "worksheets/while_practice.html",
    "title": "While loop practice",
    "section": "",
    "text": "Bacterial population growthDNA Base CounterPredator-Prey Simulation\n\n\nBacteria grow exponentially, and E. coli doubles every 20 minutes in optimum growth conditions.\nStart with 1 bacterium, and use a while loop to determine how many minutes it would take for the population to exceed 1 million.\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nThis is the answer for when the population exceeds 100,000.\n\n\nBacteria reached a population of 131072 in 340 minutes\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Set initial values for bacteria and minutes\nbacteria = 1\nminutes = 0\n\n# while loop for while bacteria number is less than 1 million\nwhile bacteria &lt; 1000000:\n    # Double bacteria number (bacteria = bacteria * 2)\n    bacteria *= 2\n    # Add 20 to the minutes (minutes = minutes + 20)\n    minutes += 20\n\n# Outside of while loop \n# Print final result\nprint(f\"Bacteria reached a population of {bacteria} in {minutes} minutes\")\n\n\n\n\n\n\nAsk the user to type DNA bases (A, T, G, C) one by one. Use a while loop to keep asking until the user types “STOP” Print the counts of each base.\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nYour answer may look something like this: (if the user types in A A C T C A stop)\n\n\nPlease input a base A T C or G. If done type stop\nThe sequence you typed in was AACTCA\nThis sequence has 3 A bases\nThis sequence has 1 T bases\nThis sequence has 2 C bases\nThis sequence has 0 G bases\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Set boolean to continue or stop \nkeep_going = True\n# Create empty string (or list) to add bases to\nmy_sequence = \"\"\n\nwhile keep_going:\n    # Ask user to input a base, or stop\n    base = input(\"Please input a base A T C or G. If done type stop\")\n    # Check for stop base\n    if base == \"stop\":\n        # set keep_going to False to stop the loop \n        keep_going = False \n    # else - only if base is not stop add to string\n    else: \n        # Add base to my_sequence (my_sequence = my_sequence + base)\n        my_sequence += base \n\n# Outside of whlie loop\n# Print results\nprint(f\"The sequence you typed in was {my_sequence}\")\n# Use .count() to count each base\nprint(f\"This sequence has {my_sequence.count(\"A\")} A bases\")\nprint(f\"This sequence has {my_sequence.count(\"T\")} T bases\")\nprint(f\"This sequence has {my_sequence.count(\"C\")} C bases\")\nprint(f\"This sequence has {my_sequence.count(\"G\")} G bases\")\n\n\n\n\n\n\nStart with 50 rabbits and 5 foxes. Each iteration (time step), rabbits reproduce, and foxes eat rabbits or die of hunger - you can decide how this is determined. Use a while loop until either species goes extinct.\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\nYour answer may look something like this:\n\n\nRound 1; 46 rabbits and 1 foxes\nRound 1; 45 rabbits and 1 foxes\nRound 1; 40 rabbits and 1 foxes\nRound 1; 38 rabbits and 1 foxes\nRound 1; 37 rabbits and 1 foxes\nRound 1; 36 rabbits and 1 foxes\nRound 1; 36 rabbits and 1 foxes\nRound 1; 33 rabbits and 1 foxes\nRound 1; 33 rabbits and 1 foxes\nRound 1; 30 rabbits and 1 foxes\nRound 1; 26 rabbits and 1 foxes\nRound 1; 23 rabbits and 1 foxes\nRound 1; 20 rabbits and 1 foxes\nRound 1; 18 rabbits and 1 foxes\nRound 1; 18 rabbits and 1 foxes\nRound 1; 14 rabbits and 1 foxes\nRound 1; 13 rabbits and 1 foxes\nRound 1; 12 rabbits and 1 foxes\nRound 1; 10 rabbits and 1 foxes\nRound 1; 10 rabbits and 1 foxes\nRound 1; 7 rabbits and 1 foxes\nRound 1; 3 rabbits and 1 foxes\nRound 1; -1 rabbits and 1 foxes\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThere are multiple ways to do this, one example answer is:\n\n# Use random module to decide reproduction and death rates\nimport random\n# Set initial values for rabbits, foxes and rounds\nrabbits = 50\nfoxes = 5\nrounds = 1\n\n# While loop for while both rabbits and foxes are more than 0\nwhile rabbits &gt; 0 and foxes &gt; 0:\n    # Reproduce rabbits\n    # random number of new rabbits between 0 and 2\n    new_rabbits = random.randint(0, 2)\n    # update number of rabbits (rabbits = rabbits + new_rabbits)\n    rabbits += new_rabbits\n\n    # Foxes eat rabbits\n    # Each fox can eat up to 5 rabbits\n    # If a fox doesn't eat a rabbit, it will die of hunger\n    # Use a for loop to treat each fox separately\n\n    # Set initial values for dead foxes and total rabbits eaten\n    dead_foxes = 0\n    total_rabbits_eaten = 0\n    # Use a for loop to treat each fox separately\n    for fox in range(foxes):\n        # Calculate random number of rabbits eaten between 0 and 5\n        rabbits_eaten = random.randint(0, 5)\n        # Add to total rabbits eaten \n        total_rabbits_eaten += rabbits_eaten\n        # If no rabbits eaten, fox dies\n        if rabbits_eaten &lt; 1:\n            dead_foxes +=1\n\n    # Update number of rabbits and foxes\n    rabbits -= rabbits_eaten\n    foxes -= dead_foxes\n\n    # Print round results\n    print(f\"Round {rounds}; {rabbits} rabbits and {foxes} foxes\")\n\nIn this answer, the rabbits always win. Can you write a version where the rabbits and foxes have equal chances of winning?",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "while loops",
      "While loop practice"
    ]
  },
  {
    "objectID": "worksheets/covid_movements.html",
    "href": "worksheets/covid_movements.html",
    "title": "Covid movements dataset",
    "section": "",
    "text": "Covid movements dataset"
  },
  {
    "objectID": "worksheets/plotting_from_a_csv_file.html",
    "href": "worksheets/plotting_from_a_csv_file.html",
    "title": "Plotting from a csv file",
    "section": "",
    "text": "Once we have our csv file, and we’ve split the lines using .split(\",\"), we can then collect our data for the x and y axes into lists to use with matplotlib.\nThis is the same example as the previous page:\n\n  📥 Download Screen_time_and_sleep.csv\n\n\n\nIf I just try to plot this data, something strange happens. The numbers aren’t in order, and the first line (column titles) are also included as points…\n\n# import matplotlib\nimport matplotlib.pyplot as plt \n\n# Use with to open the file\nwith open(\"Screen_time_and_sleep.csv\") as f: \n    # read the lines using readlines() and save to a list\n    lines = f.readlines()\n\n# set X and Y lists\nscreentime = []\nsleep_hours = []\n\n# loop through every line in the list \nfor line in lines: \n    # .strip() removes the \\n character \n    # .split() splits the line into a list at each space\n    items = line.strip().split(\",\")\n    screentime.append(items[1])\n    sleep_hours.append(items[2])\n\n# plot as a scatter graph \nplt.scatter(screentime, sleep_hours)\n\n# show the plot \nplt.show()\n\n\n\n\n\n\n\n\n\n\nThis is because the X and Y axis values are strings so we want to convert them to integers in the same way we’ve done before:\nscreentime.append( int(items[1]) )\nBut we also need to skip that header line, or else we’ll get the error:\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[2], line 18\n     14 for line in lines: \n     15     # .strip() removes the \\n character \n     16     # .split() splits the line into a list at each space\n     17     items = line.strip().split(\",\")\n---&gt; 18     screentime.append( int(items[1]) )\n     19     sleep_hours.append( int(items[2]) )\n     21 # plot as a scatter graph \n\nValueError: invalid literal for int() with base 10: 'Screen time (hours)'\n\n\n\nWhich we can do using list slicing, skipping line 0 and going through every other line in our for loop:\nfor line in lines[1:]:\nWhich can then generate the graph we want:",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting from a CSV file",
      "Plotting from a csv file"
    ]
  },
  {
    "objectID": "worksheets/writing_to_a_file.html",
    "href": "worksheets/writing_to_a_file.html",
    "title": "Writing to a file",
    "section": "",
    "text": "We can also write to a file in a similar way. When we use open() it is read-only by default but we can use the options \"a\" or \"w\" to write to files.\nThe option \"a\" will append (add to the bottom of) an existing file, and the option \"w\" will overwrite an existing file.\nLet’s use our lists of people and their favourite colours from an earlier activity, and create a new file to store this information.\n\n# define lists with information\nnames = [ \"Luffy\" , \"Zoro\" , \"Nami\" , \"Sanji\"]\ncolours = [\"Red\", \"Green\", \"Orange\", \"Yellow\"]\n\n# Create or overwrite new file \"Strawhat_data.txt\"\n\nwith open(\"Strawhat_data.txt\", \"w\") as f: \n\n    # Use a for loop to loop through every index in the lists \n    for i in range(0,4): \n        # Write a line for each character\n        f.write(f\"{names[i]} {colours[i]}\\n\")\n\nIf you run this - you should find you now have a new file in your folder!\nWhat happens if:\n\nYou remove the newline \\n character\nYou change \"w\" to \"a\"\n\nYou could also create a program that asks the user for information, and then saves that to a file.",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Reading from a file",
      "Writing to a file"
    ]
  },
  {
    "objectID": "worksheets/ifelifelse.html",
    "href": "worksheets/ifelifelse.html",
    "title": "If, elif and else",
    "section": "",
    "text": "What do we do if we have three conditions? In the below example, there are two if statements but this doesn’t work quite how we want it to.\ndog_or_cat_person = \"dog\"\nif dog_or_cat_person == \"dog\": \n  print(\"You are a dog person\")\nif dog_or_cat_person == \"cat\": \n  print(\"You are a cat person\")\nelse: \n  print(\"You are not a dog or a cat person\")\n\nYou are a dog person\nYou are not a dog or a cat person\nIn the above example, two of our conditions printed out. Even though the user was a dog person, the line “You are not a dog or a cat person” printed out as well.\nThis is because the second time we have an if, python has assumed this is unrelated to the first if. The else will execute if the second if only is False.\nThe below flow chart explains what has happened:\nflowchart TD\n    B{\"Is a dog person?\"}\n    B -- True --&gt; C[\"Dog person\"]\n    D{\"Is a cat person?\"}\n    D -- True --&gt; E[\"Cat person\"]\n    D -- False --&gt; H[\"Not a dog or cat or bird person\"]\n\n\n Flow chart of two consective if statements followed by an else statement",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If, elif and else"
    ]
  },
  {
    "objectID": "worksheets/ifelifelse.html#using-elif",
    "href": "worksheets/ifelifelse.html#using-elif",
    "title": "If, elif and else",
    "section": "Using elif",
    "text": "Using elif\nelif, short for else if, can be used instead so that many different conditions can be tried in sequence.\n\ndog_or_cat_person = \"dog\"\n\n# first if statement\nif dog_or_cat_person == \"dog\": \n  print(\"You are a dog person\")\n  \n# elif - for if the first if statement is False and this elif is True\nelif dog_or_cat_person == \"cat\": \n  print(\"You are a cat person\")\n  \n# else - for if both if and elif are false\nelse: \n  print(\"You are not a dog or a cat person\")\n\nYou are a dog person\n\n\nThis then ties together both conditions:\n\n\n\n\n\nflowchart TD\n    B{\"Is a dog person?\"}\n    B -- True --&gt; C[\"Dog person\"]\n    B -- False --&gt; D{\"Is a cat person?\"}\n    D -- True --&gt; E[\"Cat person\"]\n    D -- False --&gt; H[\"Not a dog or cat or bird person\"]\n\n\n Flow chart of an if, then elif, then else statement \n\n\n\nYou can add as many elif statements as you need.\nSee the below example with two elif statements:\n\ndog_or_cat_or_bird_person = \"bird\"\n\n# first if statement\nif dog_or_cat_or_bird_person == \"dog\": \n  print(\"You are a dog person\")\n  \n# elif - for if the first if statement is False and this elif is True\nelif dog_or_cat_or_bird_person == \"cat\": \n  print(\"You are a cat person\")\n  \n# elif - for if the previous if and elif statements are False and this elif is True\nelif dog_or_cat_or_bird_person == \"bird\": \n  print(\"You are a bird person\")\n  \n# else - for if both if and elif are false\nelse: \n  print(\"You are not a dog or a cat person\")\n\nYou are a bird person\n\n\nWe can also visualise this with a flow chart.\n\n\n\n\n\nflowchart TD\n    A[\"Dog or cat or bird person\"] --&gt; B{\"Is a dog person?\"}\n    B -- True --&gt; C[\"Dog person\"]\n    B -- False --&gt; D{\"Is a cat person?\"}\n    D -- True --&gt; E[\"Cat person\"]\n    D -- False --&gt; F{\"Is a bird person?\"}\n    F -- True --&gt; G[\"Bird person\"]\n    F -- False --&gt; H[\"Not a dog or cat or bird person\"]\n\n\n Flow chart of an if statement, followed by two elif statements, followed by an else statement",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If, elif and else"
    ]
  },
  {
    "objectID": "worksheets/Comments.html",
    "href": "worksheets/Comments.html",
    "title": "Comments",
    "section": "",
    "text": "One of the most important practices in programming is to use good comments.\nComments help explain what the code is doing - to another programmer, to whoever is marking your assignments, to your future self (you will forget how your own code works!).\nComments are sections of the code that are ignored by the compiler - they aren’t executed like the rest of your code. In python, you can comment by:\n\n# Starting with a '#' (this is the best way!)\n\"\"\"Wrapping text in triple quotes\"\"\"\n\nTry the below example:",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Comments"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_legend.html",
    "href": "worksheets/matplotlib_legend.html",
    "title": "Matplotlib legends",
    "section": "",
    "text": "If we are plotting multiple data points, we can create a legend. This involves two steps:\n\nIn your call to a plotting function add a label using label = \"\"\nAdd the line plt.legend() to the end\n\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values for first group\nx_1 = [0, 1, 2]\ny_1 = [10, 5, 8]\n\n# Make a list of x values and y values for second group\nx_2 = [2, 1.5, 0.5]\ny_2 = [7, 9, 6]\n\n# Plotting group 1 with red stars\nplt.scatter(x_1, y_1, marker = \"*\", color = 'r', label = \"red stars\")\n\n# Plotting line2 with green diamonds\nplt.scatter(x_2, y_2, marker = \"D\", color = 'g', label = \"green diamonds\")\n\n# Collect the labels to create the legend \nplt.legend()\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib legends"
    ]
  },
  {
    "objectID": "worksheets/while_loop.html",
    "href": "worksheets/while_loop.html",
    "title": "The while loop",
    "section": "",
    "text": "While loops are a different (and more dangerous) type of loop.\nThey are useful for if you want a piece of code to keep repeating until a condition is met and you may not know how many times that will be.\nFor example, if we had a DNA sequence for a protein, we might want to loop through each codon until we reach a stop codon.\n# List of codons \ncodons = [\"ATG\", \"CCG\", \"TAC\", \"GGT\", \"ACG\", \"TGA\", \"ATC\", \"CGC\"]\n\n# List of stop codons \nstop_codons = [\"TAA\", \"TAG\", \"TGA\"]\n\n# Set index \ni = 0 \n\n# Set while loop to keep going until stop codon is found \nwhile codons[i] not in stop_codons: \n    # Add 1 to i, to iterate to next codon \n    i += 1 \n\n# Print index of stop codon\nprint(f\"Stop codon found at index {i}\")",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "while loops",
      "The while loop"
    ]
  },
  {
    "objectID": "worksheets/while_loop.html#while-loop-animation",
    "href": "worksheets/while_loop.html#while-loop-animation",
    "title": "The while loop",
    "section": "While loop animation",
    "text": "While loop animation\n\n\n  Play\n  Pause\n  Restart\n  idle\n\n\n\n\ncodons = [\"ATG\", \"CCG\", \"TAC\", \"GGT\", \"ACG\", \"TGA\", \"ATC\", \"CGC\"]\nstop_codons = [\"TAA\", \"TAG\", \"TGA\"]\ni = 0\n\nwhile codons[i] not in stop_codons:\n    i = i+1\n\nprint(f\"Stop codon found at index {i}\")\n\n\n\n\n  Console",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "while loops",
      "The while loop"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_markers.html",
    "href": "worksheets/matplotlib_markers.html",
    "title": "Matplotlib markers",
    "section": "",
    "text": "For a scatter graph, we can change the marker shape using marker and size using s.\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting first point with a star\nplt.scatter(x[0], y[0], marker=\"*\", s=200)\n\n# Plotting second point with a triangle\nplt.scatter(x[1], y[1], marker=\"^\", s=200)\n\n# Plotting third point with a plus\nplt.scatter(x[2], y[2], marker=\"x\", s=200)\n\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib markers"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_markers.html#markers",
    "href": "worksheets/matplotlib_markers.html#markers",
    "title": "Matplotlib markers",
    "section": "Markers",
    "text": "Markers\nSee the below table for a list of the markers available to use.\n\n\n\n\n\n\n\n\nMarker\nExample\nDescription\n\n\n\n\n'.'\n\nPoint marker\n\n\n','\n\nPixel marker\n\n\n'o'\n\nCircle marker\n\n\n'v'\n\nTriangle down\n\n\n'^'\n\nTriangle up\n\n\n'&lt;'\n\nTriangle left\n\n\n'&gt;'\n\nTriangle right\n\n\n'1'\n\nTri down (small filled)\n\n\n'2'\n\nTri up (small filled)\n\n\n'3'\n\nTri left (small filled)\n\n\n'4'\n\nTri right (small filled)\n\n\n's'\n\nSquare\n\n\n'p'\n\nPentagon\n\n\n'*'\n\nStar\n\n\n'h'\n\nHexagon1\n\n\n'H'\n\nHexagon2\n\n\n'+'\n\nPlus\n\n\n'x'\n\nCross (x)\n\n\n'X'\n\nFilled X\n\n\n'D'\n\nDiamond\n\n\n'd'\n\nThin diamond",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Styling graphs",
      "Matplotlib markers"
    ]
  },
  {
    "objectID": "worksheets/FizzBuzz.html",
    "href": "worksheets/FizzBuzz.html",
    "title": "FizzBuzz Activity",
    "section": "",
    "text": "This is a classic question for learning programming.\nPlease write a program that prints the numbers from 1 to 100. But: - for the multiples of three print the word ”Fizz” instead of the number - for the multiples of five print the word ”Buzz” instead of the number - for numbers that are multiples of both three and five, print the word ”FizzBuzz”.\n\n\n\n\n\n\nNoteShow output\n\n\n\n\n\nThe output should look like this:\n\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\n\n\n\n\n\n\n\n\n\n\n\nTipHint 1\n\n\n\n\n\nWhen writing this, do one step at a time and test your code:\n\nJust print all the numbers from 1 to 100\nChange the numbers divisible by 3 to “Fizz”\nChange the numbers divisible by 5 to “Buzz”\nChange the numbers divisible by 3 and 5 to “FizzBuzz”\n\nOne way of calculating if a number can be divided by 3 is using the modulus % which gives you the remainder after division. If a number is divisible by 3, when you divide by three what is the remainder?\n\n\n\n\n\n\n\n\n\nTipHint 2\n\n\n\n\n\nYou’ll need to use a range of different skills here:\n\nA for loop, to go from 1 to 100\nIf/elif/else statements to determine if each number if divisible by 3 or 5\nThe maths modulus sign % or ranges with a step.\n\n\n\n\n\n\n\n\n\n\nTipHint 3\n\n\n\n\n\nYou need to make sure your if statements are in the right order - else you may never get a FizzBuzz.\nDrawing a flow chart can help you plan your answer!",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "for loops",
      "FizzBuzz Activity"
    ]
  },
  {
    "objectID": "worksheets/Variables.html",
    "href": "worksheets/Variables.html",
    "title": "Variables",
    "section": "",
    "text": "Variables are containers for storing data values. We can then use it elsewhere in our program without having to manually type it in again which can be really handy.\nTry:\n\n\n\n\n\n\nThis is the same as our first example, but first we stored the information in a variable called x. We then told python to print whatever x is.\nNext, try:\n\n\n\n\n\n\nDid you get the output you expected?\nNext, try:\n\n\n\n\n\n\nWhat is different in this example? How does that change the output?",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Variables"
    ]
  },
  {
    "objectID": "worksheets/whileloop_neverending.html",
    "href": "worksheets/whileloop_neverending.html",
    "title": "Neverending while loop",
    "section": "",
    "text": "While loops are dangerous - they’re very easy to get wrong!\nImagine if we accidentally put i=1 (set index to 1) instead of i+=1 (add 1 to our index) in our while loop - then the index would always stay at 1 and never change.\nWhatever your while loop condition is, you have to ensure that it changes inside the loop.\n# List of codons \ncodons = [\"ATG\", \"CCG\", \"TAC\", \"GGT\", \"ACG\", \"TGA\", \"ATC\", \"CGC\"]\n\n# List of stop codons \nstop_codons = [\"TAA\", \"TAG\", \"TGA\"]\n\n# Set index \ni = 0 \n\n# Set while loop to keep going until stop codon is found \nwhile codons[i] not in stop_codons: \n    # Bug: Instead of adding 1 to i, changing i to 1\n    i = 1 \n\n# Print index of stop codon\nprint(f\"Stop codon found at index {i}\")",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "while loops",
      "Neverending while loop"
    ]
  },
  {
    "objectID": "worksheets/whileloop_neverending.html#neverending-while-loop-animation",
    "href": "worksheets/whileloop_neverending.html#neverending-while-loop-animation",
    "title": "Neverending while loop",
    "section": "Neverending while loop animation",
    "text": "Neverending while loop animation\n\n\n  Play\n  Pause\n  Restart\n  idle\n\n\n\n\ncodons = [\"ATG\", \"CCG\", \"TAC\", \"GGT\", \"ACG\", \"TGA\", \"ATC\", \"CGC\"]\nstop_codons = [\"TAA\", \"TAG\", \"TGA\"]\ni = 0\n\nwhile codons[i] not in stop_codons:\n    i = 1\n\nprint(f\"Stop codon found at index {i}\")\n\n\n\n\n  Console",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "while loops",
      "Neverending while loop"
    ]
  },
  {
    "objectID": "worksheets/Species_ages.html",
    "href": "worksheets/Species_ages.html",
    "title": "Lifespan activity",
    "section": "",
    "text": "The below table contains information of maximum lifespans, length of gestation periods and adult weight for a range of different species. This information comes from the AnAge database.\nOnce you have your dictionaries and/or lists, try to write a program which does the following:",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lifespan activity"
    ]
  },
  {
    "objectID": "worksheets/Species_ages.html#task-1",
    "href": "worksheets/Species_ages.html#task-1",
    "title": "Lifespan activity",
    "section": "Task 1:",
    "text": "Task 1:\n\nPrint a list of all the species\nAsk the user to choose a species\nPrint the information for that species\n\nYour program should extract the information from your dictionaries and lists\n\n\n\n\n\n\nNoteHint\n\n\n\n\n\nYou can have a dictionary with the common name as each key and a list of the remaining information as the value\n\n\n\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\n\n\nThe Brazilian tapir has a lifespan of 39.6 years,\n gestation or egg incubation time of 398 days\n and adult weight of 250000",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lifespan activity"
    ]
  },
  {
    "objectID": "worksheets/Species_ages.html#task-2",
    "href": "worksheets/Species_ages.html#task-2",
    "title": "Lifespan activity",
    "section": "Task 2:",
    "text": "Task 2:\n\nAsk the user to enter two species\nFor each value (lifespan/gestation/weight), compare the two species and print which species has the larger value.\n\n\n\n\n\n\n\nNoteExample output\n\n\n\n\n\n\n\nComparing Brazilian tapir and Human\nHuman has a longer lifespan\nBrazilian tapir has a longer gestation or egg incubation period\nBrazilian tapir has a heavier adult weight",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lifespan activity"
    ]
  },
  {
    "objectID": "worksheets/FormatStrings.html",
    "href": "worksheets/FormatStrings.html",
    "title": "Format Strings",
    "section": "",
    "text": "We can also print our variables within a string using a format string.\nThis can be really useful when we want to print multiple pieces of information from our python program and need to know which is which.\nA format string is similar to a string but starts with an f: f\"Add string here\"\nAnd we can insert the value of one of our variables using curly brackets {}\nSee example below:",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Format Strings"
    ]
  },
  {
    "objectID": "worksheets/FormatStrings.html#give-it-a-go",
    "href": "worksheets/FormatStrings.html#give-it-a-go",
    "title": "Format Strings",
    "section": "Give it a go",
    "text": "Give it a go\nSee if you can make a format string to print the following:\nEscherichia coli is a Gram negative bacteria\n\n\n\n\n\n\n\n\n\n\n\n\n\nNoteHint 1\n\n\n\n\n\nPut the variable names inside of curly brackets {}\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\nspecies = \"Escherichia coli\"\ngramtype = \"Gram negative\"\n\nprint(f\"{species} is a {gramtype} bacteria\")\n\nEscherichia coli is a Gram negative bacteria",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Format Strings"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_piechart.html",
    "href": "worksheets/matplotlib_piechart.html",
    "title": "Matplotlib Pie Charts",
    "section": "",
    "text": "We can also create pie charts in matplotlib.\n\nSimple pie chartPie chart with labelsPie chart with explode\n\n\nThis is a simple pie chart - we have a list of proportions, and use plt.pie() to create a pie chart.\n\n# import matplotlib\nimport matplotlib.pyplot as plt\n\n# each size is out of 100, \n# for what proportion of the pie chart each slice takes\nsizes_list = [15, 30, 45, 10] \n\nplt.pie(sizes_list)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nWe can also add a list of labels using labels=\n\n# import matplotlib\nimport matplotlib.pyplot as plt\n\n# labels to go with the pie chart sizes\nlabels_list = [\"Frogs\", \"Hogs\", \"Dogs\", \"Logs\"]\nsizes_list = [15, 30, 45, 10]\n\nplt.pie(sizes_list, labels=labels_list)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nWe’ve changed two things here:\n\nWe’ve added an explode list using explode= - what has this done to the pie chart?\nWe’ve changed the start angle using startangle= - what has this done to the pie chart?\n\n\n# import matplotlib\nimport matplotlib.pyplot as plt\n\nlabels_list = [\"Frogs\", \"Hogs\", \"Dogs\", \"Logs\"]\nsizes_list = [15, 30, 45, 10]\n# What does explode value do?\nexplode_list = [0, 0.1, 0, 0]\n\n# We've also added startangle=90\nplt.pie(sizes_list, explode=explode_list, labels=labels_list, startangle=90)\n\n# What does this line do? \nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib Pie Charts"
    ]
  },
  {
    "objectID": "worksheets/ifelse_fixerrors.html",
    "href": "worksheets/ifelse_fixerrors.html",
    "title": "Fix the errors activity",
    "section": "",
    "text": "Below are a set of if statements - they all have errors in. Can you fix them?\n\nFix the error 1:Fix the error 2:Fix the error 3:\n\n\n\nmy_value = 0.01 \nif my_value\n  print(my_value, \"is not 0\")\nelse: \n  print(my_value, \"is 0\")\n\n\n  Cell In[1], line 2\n    if my_value\n               ^\nSyntaxError: expected ':'\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\nmy_value = 0.01 \nif my_value: # : was missing at the end of if statement\n  print(my_value, \"is not 0\")\nelse: \n  print(my_value, \"is 0\")\n\n0.01 is not 0\n\n\n\n\n\n\n\n\nuser_age = 14\nage_restriction = 18\n\nif user_age &lt; age_restriction:\nprint(\"You are too young\")\nelse: \nprint(\"You are old enough\")\n\n\n  Cell In[3], line 5\n    print(\"You are too young\")\n    ^\nIndentationError: expected an indented block after 'if' statement on line 4\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\nuser_age = 14\nage_restriction = 18\n\nif user_age &lt; age_restriction:\n    print(\"You are too young\") # indentation was missing (four spaces at start of line)\nelse: \n    print(\"You are old enough\") # indentation was missing (four spaces at start of line)\n\nYou are too young\n\n\n\n\n\n\n\n\n# Check if species belongs to genus\ntarget_genus = \"Trypanosoma\"\nmy_species = \"Trypanosoma brucei\"\n\nif Target_genus in my_species:\n  print(f\"{my_species} is part of {target_genus}\")\nelse: \n  print(f\"{my_species} is not part of {target_genus}\")\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 5\n      2 target_genus = \"Trypanosoma\"\n      3 my_species = \"Trypanosoma brucei\"\n----&gt; 5 if Target_genus in my_species:\n      6   print(f\"{my_species} is part of {target_genus}\")\n      7 else: \n\nNameError: name 'Target_genus' is not defined\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Check if species belongs to genus\ntarget_genus = \"Trypanosoma\"\nmy_species = \"Trypanosoma brucei\"\n\n# python is case sensenitive \n# if your variable is target_genus (with no capital letters) then you always need to refer to is as target_genus. \nif target_genus in my_species:\n  print(f\"{my_species} is part of {target_genus}\")\nelse: \n  print(f\"{my_species} is not part of {target_genus}\")\n\nTrypanosoma brucei is part of Trypanosoma",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "Fix the errors activity"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_practice.html",
    "href": "worksheets/matplotlib_practice.html",
    "title": "Matplotlib practice",
    "section": "",
    "text": "Now that you’ve got an idea of matplotlib, try to plot the following:\n\nExponential growthTemperature and enzyme activityCovid and candles\n\n\nYou might have done this exercise in the while loop section\nE. coli doubles every 20 minutes.\nPlot the growth of bacteria in an experiment:\n\nStarting with 1 bacterium, and a time of 0\nCalculate the growth over 400 minutes\nPlot time on the x axis, and bacteria on the y axis\n\n\n\n\n\n\n\nTipExample output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTake the following two lists, of temperatures and corresponding enzyme activities, and plot them on a scatter graph.\n\n# Temperature in degrees Celsius \ntemperature = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 55, 60, 65, 70]\n\n# Simulated enzyme activity (U/mL)\nenzyme_activity = [4, 6, 9, 12, 16, 20, 25, 30, 35, 40, 45, 48, 50, 52, 53, 54, 52, 48, 40, 30, 20, 12, 6, 3, 1]\n\n\n\n\n\n\n\nTipExample output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn an experiment, people were:\n\nTested for an active Covid-19 infection\nAsked to rate how strongly they could smell a scented candle\n\nThe results can be found below:\n\n\n\nCovid result\nScented candle strength\n\n\n\n\nPositive\n3, 3, 2, 1, 4, 3, 3, 5, 3, 2, 1, 2\n\n\nNegative\n5, 4, 5, 5, 5, 4, 4, 2, 4, 5, 4, 3\n\n\n\nPlot the results as either:\n\nBar chart of the average candle rating for each category\nBox plot of results for each category\n\n\n\n\n\n\n\nNoteExample barchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTipExample boxplot",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib practice"
    ]
  },
  {
    "objectID": "worksheets/String_methods.html",
    "href": "worksheets/String_methods.html",
    "title": "String methods, indexing and slicing",
    "section": "",
    "text": "String methodsConverting to integersString indexing and slicing\n\n\nSo far we’ve only been using strings exactly as they are - including when we compare them. But python is case senstive; so \"atg\" is not the same as \"ATG\".\nWe can use the following methods with an if statement - they will return a True or False\n\n.isupper(): check if string is upper case\n.islower(): check if string is lower case\n.isdigit(): check if string is numerical digits\n.upper(): converts string to upper case\n.lower(): converts string to lower case\n\n\n# Define a sequence\nmy_sequence = \"atg\"\n\n# Use .iflower() to determine if string is lower case\nif my_sequence.islower():\n    # if lower case, convert to upper case using .upper()\n    my_sequence = my_sequence.upper()\n\n# print final sequence\nprint(f\"My sequence {my_sequence} is upper case\")\n\nMy sequence ATG is upper case\n\n\n\n\n\n\n\n\nWarningWill this work on Sentence Case?\n\n\n\n\n\nWill this still work if we change the first line to the following?\n\nmy_sequence = \"Atg\"\n\nWhat do you think is happening? Can you rewrite the code so that this works?\n\n\n\n\n\nWe can also convert strings to integers using int() and floats using float().\n\nmy_sequence = \"15\"\n\nif my_sequence.isdigit():\n    my_sequence = float(my_sequence)\n\nprint(f\"My sequence {my_sequence} is of type {type(my_sequence)}\")\n\nMy sequence 15.0 is of type &lt;class 'float'&gt;\n\n\n\n\n\n\n\n\nNoteWhy have we used an if statement?\n\n\n\n\n\nWe didn’t need to use an if statement here - but it’s a good way of checking if the variable you want to convert to a float is infact a number.\nIf you try to convert a string that isn’t a number - e.g. \"hello\" - to a float, then you’ll get an error.\n\nmy_sequence = \"hello\"\nmy_sequence = float(my_sequence)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[4], line 2\n      1 my_sequence = \"hello\"\n----&gt; 2 my_sequence = float(my_sequence)\n\nValueError: could not convert string to float: 'hello'\n\n\n\n\n\n\n\n\nWe can also retrieve a character from a string using an index or get a selection using string slicing - just like we can with lists!\nWe can give up to three values when retrieving information from a string:\nList_name [ start : stop : step ]\n\nstart: the index to start with (e.g. 2 for the third item)\nstop: the index to stop at (the stop item will not be included)\nstep: how gap between items (e.g. 2 would mean every second item from the list)\n\n\nmy_sequence = \"Hello World!\"\n\n# Printing the 2nd and 11th characters from the string using the index \nprint(f\"my_sequence[1] is {my_sequence[1]}\")\nprint(f\"my_sequence[10] is {my_sequence[10]}\")\n\n# Printing every third item from the 2nd to the 11th items in the list\nprint(f\"my_sequence [ 1 : 10 : 3 ] is {my_sequence [ 1 : 10 : 3 ]}\" )\n\nmy_sequence[1] is e\nmy_sequence[10] is d\nmy_sequence [ 1 : 10 : 3 ] is eoo",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "String methods, indexing and slicing"
    ]
  },
  {
    "objectID": "worksheets/premature_stop_codon.html",
    "href": "worksheets/premature_stop_codon.html",
    "title": "Premature stop codon activity",
    "section": "",
    "text": "Premature stop codon activity\nFor this activity you have a Wild Type gene sequence, and three mutants. The task is to write a program that detects whether or not the mutant has a premature stop codon.\n\nStart codon: ATG\n\n\nStop codons: TAA, TGA, TAG\n\n\n  📥 Download Premature_stop_codon.fa\n\n\n\nTry to break this down into small chunks:\n\nWrite a program to read the fasta file, and save the Wild Type and mutant sequences\nWrite a program to find the stop codon in the Wild Type sequence, and count the number of codons. The answer should be 48 codons.\nWrite a program to find the first stop codon in each of the mutant sequences, and count the number of codons.\nCompare the number of codons from the Wild Type sequence to each mutant sequence, and determine whether or not the mutant has a premature stop codon.\n\n\n\n\n\n\n\nNoteHint\n\n\n\n\n\nAll of these sequences start at the start codon ATG\nA codon is three bases long - could you use range() to get a loop of indexes which increase by 3 each time?\nHow could you get three bases out of a sequence in one go? Could you use slicing?",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Reading from a file",
      "Premature stop codon activity"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries.html",
    "href": "worksheets/Dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "The basic concept of a dictionary is a key-value pair. That means you have a value (like the definition “a large non-venomous snake that kills prey by constriction”) and a key you might use to look it up (like “python”).\nThe dictionary you know as a book is an example of lots of key-value pairs.\nPython’s dictionaries are similar to that, so it’s a useful metaphor (although there are some differences).\nThe main point is that you get the value of an item (the definition) by using “python” as the key for finding it.\nThis is different from lists where you found a the value of an item by its position in the list. In a dictionary (book), you really don’t care about the page number: all you care about is that you have the definition for the key. That is, you want the value (definition) for the key (word) and once you’ve got it it doesn’t matter where in the dictionary you found it (provided you found it).",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries.html#dictionaries-verses-lists",
    "href": "worksheets/Dictionaries.html#dictionaries-verses-lists",
    "title": "Dictionaries",
    "section": "Dictionaries verses lists",
    "text": "Dictionaries verses lists\n\nDictionaries uses curly brackets {} where lists use square brackets []\n\nIt might seem like a small distinction, but it’s very important! If you use curly brackets { }, you’re telling the Python interpreter that you are declaring a dictionary (just like square brackets indicated a list). But that also means Python expects a name-value pair for each entry… and that’s done with a colon.\nFor example:\nRun this and compare it with wht you would expect if you just printed out a list. Note how _buildings is the name of the variable that is the dictionary; you know that because it’s on the left-hand side of the assignment operator (=), so this is a variable declaration.\n\n\n\n\n\n\nThat’s not very exciting — it’s just printed back what you put in, more or less, right? But… note that Python prints a dictionary within those { } curly brackets, and shows colons in there. This is different to lists, and later it might help you to remember that they look different when you ask Python to print them out.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries.html#dictionary-retrieval-use-key-instead-of-index",
    "href": "worksheets/Dictionaries.html#dictionary-retrieval-use-key-instead-of-index",
    "title": "Dictionaries",
    "section": "Dictionary retrieval: use key instead of index",
    "text": "Dictionary retrieval: use key instead of index\nAnd here is the magic of dictionaries: you get the module you want from that dictionary by using the module code as the key. Run the following and see that you get the right value, just by saying “LS6036”… without ever needing the index.\nNote that the key goes inside square brackets just like the index in a list.\n\nprint( module_codes[ \"LS6036\" ] )",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries"
    ]
  },
  {
    "objectID": "worksheets/reading_a_fasta_file.html",
    "href": "worksheets/reading_a_fasta_file.html",
    "title": "Reading a fasta file",
    "section": "",
    "text": "Now let’s apply this to a biological file format - a fasta file (.fa)\nA fasta file is a file of sequences, where each sequence is two lines in the file.\nThe first line is a header sequence (starts with &gt;) The second line is the raw sequence. For example:\n&gt;My sequence\nAATTGGCCATG\nDownload the following file, and add that to the folder where you have your python files:\n\n  📥 Download Simple_fasta_file.fa\n\n\n\nAnd see if you can do the following:\n\nRead the file into python\nFor each sequence, calculate the proportion of the sequence that is either G or C (we call this the GC content)\nPrint the results\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\nThis is one way to do that:\n\n# Start by opening the file \nwith open(\"../course_files/Simple_fasta_file.fa\") as f:\n    # read the lines to list lines \n    lines = f.readlines()\n\n# use a for loop to loop through the lines\nfor line in lines:\n    # remove the newline \\n character\n    line = line.strip()\n\n    # Check if it is header or sequence \n    if \"&gt;\" in line:\n        # remove the &gt; and save the header\n        header = line.replace(\"&gt;\", \"\")\n    # if not header, must be sequence\n    else: \n        # save the sequence\n        sequence = line\n\n        # calculate proportion of GC\n        # Add counts of G and C, divide by length of sequence\n        GC_content = (sequence.count(\"G\") + sequence.count(\"C\")) / len(sequence)\n\n        # print result\n        print(f\"{header} has a GC content of {GC_content}\")\n\nSequence 1 has a GC content of 0.5571428571428572\nSequence 2 has a GC content of 0.7285714285714285\nSequence 3 has a GC content of 0.42857142857142855",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Reading from a file",
      "Reading a fasta file"
    ]
  },
  {
    "objectID": "worksheets/reading_a_csv_file.html",
    "href": "worksheets/reading_a_csv_file.html",
    "title": "Reading from a csv file",
    "section": "",
    "text": "We’ve already read a file and split lines by spaces in the Reading from a file section.\nNow we’re going to look at a CSV file (comma separated variables).\n\n  📥 Download Screen_time_and_sleep.csv\n\n\n\nThis is esentially a table of information, stored as text separated by commas.\nThe following table of information:\n\n\n\nName\nScreen time (hours)\nSleep (hours)\n\n\n\n\nJaydev\n12\n5\n\n\nLizzie\n14\n10\n\n\nTharshan\n8\n9\n\n\nSagar\n5\n8\n\n\nSaitama\n15\n4\n\n\n\nIn a csv file would look like:\nName,Screen time (hours),Sleep (hours)\nJaydev,12,5 \nLizzie,14,10 \nTharshan,8,9 \nSagar,5,8 \nSaitama,15,4 \nWe can read this file in python, and split every line by the comma. Instead of .strip().split() we can specify that we want to split on a comma (instead of a space) by using .strip().split(\",\")\n\n# Use with to open the file\nwith open(\"Screen_time_and_sleep.csv\") as f: \n    # read the lines using readlines() and save to a list\n    lines = f.readlines()\n\n# loop through every line in the list \nfor line in lines: \n    # .strip() removes the \\n character \n    # .split() splits the line into a list at each space\n    items = line.strip().split(\",\")\n    print(items)\n\n\n\n['Name', 'Screen time (hours)', 'Sleep (hours)']\n['Jaydev', '12', '5']\n['Lizzie', '14', '10']\n['Tharshan', '8', '9']\n['Sagar', '5', '8']\n['Saitama', '15', '4']",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting from a CSV file",
      "Reading from a csv file"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_barchart.html",
    "href": "worksheets/matplotlib_barchart.html",
    "title": "Matplotlib bar charts and histograms",
    "section": "",
    "text": "With matplotlib, we can also use:\n\nplt.bar() to make bar charts\nplt.barh() to make horizontal bar charts\nplt.hist() to calculate and make histograms\n\n\nBar chart exampleHorizontal bar chartHistogram\n\n\nBar chart of number of species in an area, using a list of species and a list of values.\n\n# Import matplotlib\nimport matplotlib.pyplot as plt \n\n# Define lists \nspecies = [\"Voles\", \"Frogs\", \"Otters\", \"Nematodes\", \"Eels\"]\ncounts = [10, 39, 1, 22, 5]\n\n# plot as a bar chart \nplt.bar(species, counts)\n\n# show graph \nplt.show()\n\n\n\n\n\n\n\n\n\n\nSame example, but oriented differently!\n\n# Import matplotlib\nimport matplotlib.pyplot as plt \n\n# Define lists \nspecies = [\"Voles\", \"Frogs\", \"Otters\", \"Nematodes\", \"Eels\"]\ncounts = [10, 39, 1, 22, 5]\n\n# plot as a bar chart \nplt.barh(species, counts)\n\n# show graph \nplt.show()\n\n\n\n\n\n\n\n\n\n\nIf we have a set of values, for example number of puppies in a litter, and we want to plot a histogram we can also do that.\nplt.hist() will take the values we put in an separate them into categories (0-2, 2-4, 4-6) and then count how many litters fit in each category.\nWhat happens if you change the number of bins?\n\n# Import matplotlib\nimport matplotlib.pyplot as plt \n\n# Define initial data\npuppies_per_litter = [5, 2, 6, 1, 3, 4, 4, 3, 2, 5, 6, 6, 6, 8, 7, 7, 6, 6, 7, 6, 5, 5, 5, 4, 8, 8, 7, 6, 6, 5, 4, 5, 2, 1, 8, 6]\n\n# plot as a histogram \nplt.hist(puppies_per_litter, bins=8)\n\n# show graph \nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nGerman Shepard with 5 puppies",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib bar charts and histograms"
    ]
  },
  {
    "objectID": "worksheets/crab_activity.html",
    "href": "worksheets/crab_activity.html",
    "title": "Crab activity",
    "section": "",
    "text": "The following CSV file contains data about crabs caught by the US Governmental Organisation NOAA Fisheries during their annual Bottom Trawl Surveys from 1975 - 2018.\nThis is a shortened subsample of the full dataset - the dataset is so large that it cannot be fully opened in Excel!\nThis has some catch data on the following crab species:\nThis dataset contains the following information:",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting from a CSV file",
      "Crab activity"
    ]
  },
  {
    "objectID": "worksheets/crab_activity.html#give-it-a-go",
    "href": "worksheets/crab_activity.html#give-it-a-go",
    "title": "Crab activity",
    "section": "Give it a go",
    "text": "Give it a go\nSee if you can extract the data from the CSV file and use that to create a plot in matplotlib. There are many different ways you could plot this data!\n\n\n\n\n\n\nNoteExample: Size and shell condition\n\n\n\n\n\nThe below graph plots size on the x axis and shell condition on the y axis, with a colour code for species.\n\n\n\n\n\n\nWarning999 values\n\n\n\n\n\nIt looks like there are two outliers much larger than the other crabs however in this dataset, a crab that wasn’t or couldn’t be measured is listed as 999!",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting from a CSV file",
      "Crab activity"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries_II.html",
    "href": "worksheets/Dictionaries_II.html",
    "title": "Dictionaries II",
    "section": "",
    "text": "It’s simple to add a new item to a dictionary. You used .append() to add to a list but there is a simpler way for dictionaries: you can add a new key value pair using the format: dictionary_name[key] = value\nHere’s a program that adds some chemicals and then invites you to add another three:\n\n# Create an empty dictionary\nmy_elements = {} \n\n# Add elements to the dictionary \n\nmy_elements[\"H\"]  = \"Hydrogen\"\nmy_elements[\"He\"] = \"Helium\"\nmy_elements[\"O\"]  = \"Oxygen\"\nmy_elements[\"C\"]  = \"Carbon\"\n\n# print the final dictionary\nprint(my_elements)\n\n{'H': 'Hydrogen', 'He': 'Helium', 'O': 'Oxygen', 'C': 'Carbon'}\n\n\nCan you use the input() function to get the user to input a chemical symbol and the corresponding name, and add that to the dictionary?\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Invite the user to enter a key value pair\nsymbol = input(\"Enter a chemical symbol: \")\nname = input(f\"And the name for {symbol}: \")\nmy_elements[symbol] = name",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries II"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries_II.html#adding-to-a-dictionary",
    "href": "worksheets/Dictionaries_II.html#adding-to-a-dictionary",
    "title": "Dictionaries II",
    "section": "",
    "text": "It’s simple to add a new item to a dictionary. You used .append() to add to a list but there is a simpler way for dictionaries: you can add a new key value pair using the format: dictionary_name[key] = value\nHere’s a program that adds some chemicals and then invites you to add another three:\n\n# Create an empty dictionary\nmy_elements = {} \n\n# Add elements to the dictionary \n\nmy_elements[\"H\"]  = \"Hydrogen\"\nmy_elements[\"He\"] = \"Helium\"\nmy_elements[\"O\"]  = \"Oxygen\"\nmy_elements[\"C\"]  = \"Carbon\"\n\n# print the final dictionary\nprint(my_elements)\n\n{'H': 'Hydrogen', 'He': 'Helium', 'O': 'Oxygen', 'C': 'Carbon'}\n\n\nCan you use the input() function to get the user to input a chemical symbol and the corresponding name, and add that to the dictionary?\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Invite the user to enter a key value pair\nsymbol = input(\"Enter a chemical symbol: \")\nname = input(f\"And the name for {symbol}: \")\nmy_elements[symbol] = name",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries II"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries_II.html#dictionary-keys",
    "href": "worksheets/Dictionaries_II.html#dictionary-keys",
    "title": "Dictionaries II",
    "section": "Dictionary keys",
    "text": "Dictionary keys\nYou can use the function .keys() to get a list of all the keys in your dictionary. You could also use .values() to get a list of all the values. Which one do you think is more useful? When would you use them?\n\n# Create a dictionary of elements\nmy_elements = {  \n    # each key-value pair is separated by a comma\n    \"H\"  : \"Hydrogen\",\n    \"He\" : \"Helium\",\n    \"O\"  : \"Oxygen\",\n    \"C\"  : \"Carbon\"\n}\n\n# print the keys\nprint(f\"Dictionary keys are {my_elements.keys()}\")\nprint(f\"Dictionary values are {my_elements.values()}\")\n\nDictionary keys are dict_keys(['H', 'He', 'O', 'C'])\nDictionary values are dict_values(['Hydrogen', 'Helium', 'Oxygen', 'Carbon'])\n\n\nCould you use an if statement to see if a user input chemical symbol is in the dictionary?",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries II"
    ]
  },
  {
    "objectID": "worksheets/Dictionaries_II.html#dictionary-errors",
    "href": "worksheets/Dictionaries_II.html#dictionary-errors",
    "title": "Dictionaries II",
    "section": "Dictionary errors",
    "text": "Dictionary errors\nIn the below example we ask for a key that isn’t in the dictionary - what type of error do we get?\n\nmy_elements = {}  # this is an empty dictionary... \n\n# ...so let's add some key-value pairs\n\nmy_elements[\"H\"]  = \"Hydrogen\"\nmy_elements[\"He\"] = \"Helium\"\nmy_elements[\"O\"]  = \"Oxygen\"\nmy_elements[\"C\"]  = \"Carbon\"\n\nprint(my_elements[\"N\"])\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[3], line 10\n      7 my_elements[\"O\"]  = \"Oxygen\"\n      8 my_elements[\"C\"]  = \"Carbon\"\n---&gt; 10 print(my_elements[\"N\"])\n\nKeyError: 'N'\n\n\n\nError messages are supposed to be helpful - so it’s good to make a note of what types of errors you get. Next time you get a KeyError you’ll know the issue is with your dictionary.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Dictionaries II"
    ]
  },
  {
    "objectID": "worksheets/random.html",
    "href": "worksheets/random.html",
    "title": "The random package",
    "section": "",
    "text": "For some programs, you may want a random number or to choose a random item from a list.\nTo do this we can import random from our python library.",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "The random package"
    ]
  },
  {
    "objectID": "worksheets/random.html#choosing-a-random-number",
    "href": "worksheets/random.html#choosing-a-random-number",
    "title": "The random package",
    "section": "Choosing a random number",
    "text": "Choosing a random number\nTo get a single random number, we can use the random integer function random.randint().\n\n\n\n\n\n\nThe two numbers we put into randint are the numbers we want to choose between - so (0,50) is asking for a random number between 0 and 50.",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "The random package"
    ]
  },
  {
    "objectID": "worksheets/random.html#choosing-a-random-item-from-a-list",
    "href": "worksheets/random.html#choosing-a-random-item-from-a-list",
    "title": "The random package",
    "section": "Choosing a random item from a list",
    "text": "Choosing a random item from a list",
    "crumbs": [
      "Learn",
      "**Logic and Loops**",
      "Logic",
      "The random package"
    ]
  },
  {
    "objectID": "worksheets/ifelse.html",
    "href": "worksheets/ifelse.html",
    "title": "If and else",
    "section": "",
    "text": "Sometimes we may want our code to act differently in different situations. For example, if we write a program to translate an mRNA sequence to an amino acid chain, we want the program to only start at the start codon and stop once we reach the stop codon.\nTo do this we can use python keywords if and else. This follows the following struture:\nAn indent is either 4 spaces \"    \" or a tab at the start of a line. This signals that we want this code to be part of the if/else statement.\nTry the below example. This code uses True which is a boolean data type.\nWe can also visualise this with a flow chart:\nflowchart TD\n    A{\"Still alive?\"}\n    A -- True --&gt; B[\"I'm still alive\"]\n    A -- False --&gt; C[\"Oh no\"]\n\n\n Flow chart of two consective if statements followed by an else statement",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If and else"
    ]
  },
  {
    "objectID": "worksheets/ifelse.html#give-it-a-go",
    "href": "worksheets/ifelse.html#give-it-a-go",
    "title": "If and else",
    "section": "Give it a go:",
    "text": "Give it a go:\nTry: the above if statement, but changing…\n\nstill_alive = true\nstill_alive = TRUE\nstill_alive = False\nstill_alive = \"False\"\nstill_alive = 0\nstill_alive = 1\nstill_alive = 0.1\n\nDo you understand the above? Are there any that surprised you?\nBoolean True and False are their own data type (‘bool’), like strings or integers…\n\nprint ( type (True) )\n\n&lt;class 'bool'&gt;",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Inputs, ifs and elses",
      "If and else"
    ]
  },
  {
    "objectID": "worksheets/List_methods.html",
    "href": "worksheets/List_methods.html",
    "title": "List methods",
    "section": "",
    "text": "A list method is a function we can use on a list - such as to add a value or remove one.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List methods"
    ]
  },
  {
    "objectID": "worksheets/List_methods.html#append",
    "href": "worksheets/List_methods.html#append",
    "title": "List methods",
    "section": "append()",
    "text": "append()\nWe can add items to a list using the list method .append() like in the below example. This always follows the format:\nlist_name.append( item_to_append )\n\n# create a list of names\nnames = [ \"Luffy\" , \"Zoro\" , \"Nami\" , \"Sanji\" ]\nprint(f\"Before: {names}\")\n\n# append a new string to the list of names\nnames.append(\"Usopp\")\n\n# print the updated list\nprint(f\"After: {names}\")\n\nBefore: ['Luffy', 'Zoro', 'Nami', 'Sanji']\nAfter: ['Luffy', 'Zoro', 'Nami', 'Sanji', 'Usopp']\n\n\nThe method .append() changes the list directly, and doesn’t return any useful information, so we don’t need to store this in a variable.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List methods"
    ]
  },
  {
    "objectID": "worksheets/List_methods.html#count",
    "href": "worksheets/List_methods.html#count",
    "title": "List methods",
    "section": "count()",
    "text": "count()\nHowever, other list methods such as .count() will return a value we can store in a variable and use later.\n\n# create a list of names\nnames = [ \"Luffy\" , \"Zoro\" , \"Nami\" , \"Luffy\", \"Sanji\" ]\n\n# count the number of occurences of \"Luffy\"\nresult = names.count(\"Luffy\")\n\n# print the count of names\nprint(result)\n\n2",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List methods"
    ]
  },
  {
    "objectID": "worksheets/List_methods.html#other-useful-methods",
    "href": "worksheets/List_methods.html#other-useful-methods",
    "title": "List methods",
    "section": "Other useful methods",
    "text": "Other useful methods\n\n\n\n\n\n\n\nList method\nDescription\n\n\n\n\n.append()\nAdd item to list\n\n\n.count()\nCount number of occurances of item in list\n\n\n.index()\nReturn the index of the first element of item in list\n\n\n.remove()\nRemove item from list\n\n\n.pop()\nRemove item from list at specified index\n\n\n.reverse()\nReverse order of list\n\n\n.sort()\nSort the list",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List methods"
    ]
  },
  {
    "objectID": "worksheets/List_methods.html#give-it-a-go",
    "href": "worksheets/List_methods.html#give-it-a-go",
    "title": "List methods",
    "section": "Give it a go",
    "text": "Give it a go\nUsing the data you collected from your peers, and your knowledge of lists, indexing and list methods do the following:\n\nWrite the data you collected into a series of lists\nUse input() to ask the user the same questions you asked your peers\nUse .append() to add each of their answers to your lists\nPrint out the list of names and ask the user to select one to remove from the lists\nUse this answer to get the index for that person, and remove their information from all of your lists\nPrint your final lists.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "List methods"
    ]
  },
  {
    "objectID": "worksheets/matplotlib_scatter.html",
    "href": "worksheets/matplotlib_scatter.html",
    "title": "Matplotlib scatter",
    "section": "",
    "text": "If we want to make a scatter graph instead of a line graph, we can use plt.scatter().\nThe rest is the same as for the line graph!\n\n# Import the plotting library from matplotlib \nimport matplotlib.pyplot as plt\n\n# Make a list of x values and y values\nx = [0, 1, 2]\ny = [10, 5, 8]\n\n# Plotting x values against y values \nplt.scatter(x, y)\n\n# View the created graph\nplt.show()",
    "crumbs": [
      "Learn",
      "**Matplotlib**",
      "Plotting graphs",
      "Matplotlib scatter"
    ]
  },
  {
    "objectID": "worksheets/OxygenInBlood.html",
    "href": "worksheets/OxygenInBlood.html",
    "title": "Oxygen in blood exercise",
    "section": "",
    "text": "A patient has the following blood oxygen readings:",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Oxygen in blood exercise"
    ]
  },
  {
    "objectID": "worksheets/OxygenInBlood.html#calculate-bound-oxygen",
    "href": "worksheets/OxygenInBlood.html#calculate-bound-oxygen",
    "title": "Oxygen in blood exercise",
    "section": "Calculate bound oxygen",
    "text": "Calculate bound oxygen\nEvery gram of hemoglobin can maximally bind 1.34 mL of oxygen.\nThis mean we can calculate the maximum amount of oxygen bound to haemoglobin by multiplying the concentration of haemoglobin [Hb] (in g / dL blood) with this value 1.34 mL O_2 per g haemoglobin.\nHowever, not all haemoglobin in the blood is bound to oxygen. We can multiply the maximum amount of oxygen bound to haemoglobin by the haemoglobin saturation to calculate the amount of oxygen bound in the blood.\n\\[\n\\text{Bound oxygen} = [Hb] \\frac{\\text{g Hb}}{\\text{dL}} \\times 1.34 \\frac {\\text{mL } O_2}{\\text{g Hb}} \\times \\frac{\\text{Hb saturation}}{100}\n\\]\n\nGive it a go:\n\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Add in starting values \nHb_concentration = 15\nHb_saturation = 96 / 100 # divide by 100 as it's a percent (per one hundred)\nMax_oxygen_per_Hb = 1.34 \n\n# Calculate bound oxygen by multiplying the three values \nBound_oxygen = Hb_concentration * Hb_saturation * Max_oxygen_per_Hb\n\n# print the result\nprint(Bound_oxygen)\n\n19.296",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Oxygen in blood exercise"
    ]
  },
  {
    "objectID": "worksheets/OxygenInBlood.html#calculate-dissolved-oxygen",
    "href": "worksheets/OxygenInBlood.html#calculate-dissolved-oxygen",
    "title": "Oxygen in blood exercise",
    "section": "Calculate dissolved oxygen",
    "text": "Calculate dissolved oxygen\nThere is also a small amount of oxygen dissolved in the blood, not bound to haemoglobin.\nWe can calculate this by multiplying the arterial oxygen tension (in mmHg) and the solubility coefficient of oxygen.\nThe solubility coefficient of oxygen is \\(0.0031 \\text{mL} \\frac{\\frac{O_2}{\\text{dL blood}}}{\\text{mmHg}}\\).\n\\[\n\\text{Dissolved oxygen} = \\text{arterial oxygen tension mmHg} \\times 0.0031 \\text{mL} \\frac{\\frac{O_2}{\\text{dL blood}}}{\\text{mmHg}}\n\\]\n\nGive it a go\n\n\n\n\n\n\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Add in values for arterial tension and solubility coefficient\narterial_tension = 89\nsolubility_coefficient = 0.0031\n\n# Calculate by multiplying the two values\nDissolved_oxygen = arterial_tension * solubility_coefficient\nprint(Dissolved_oxygen)\n\n0.2759",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Oxygen in blood exercise"
    ]
  },
  {
    "objectID": "worksheets/OxygenInBlood.html#calculate-total-oxygen",
    "href": "worksheets/OxygenInBlood.html#calculate-total-oxygen",
    "title": "Oxygen in blood exercise",
    "section": "Calculate total oxygen",
    "text": "Calculate total oxygen\nNow to calculate the total oxygen, all you need to do is combine the two and add them together!\n\n\n\n\n\n\nTipShow answer\n\n\n\n\n\n\n# Add in starting values \nHb_concentration = 15\nHb_saturation = 96 / 100 # divide by 100 as it's a percent (per one hundred)\nMax_oxygen_per_Hb = 1.34 \n\n# Calculate bound oxygen by multiplying the three values \nBound_oxygen = Hb_concentration * Hb_saturation * Max_oxygen_per_Hb\nprint(Bound_oxygen)\n\n# Add in values for arterial tension and solubility coefficient\narterial_tension = 89\nsolubility_coefficient = 0.0031\n\n# Calculate by multiplying the two values\nDissolved_oxygen = arterial_tension * solubility_coefficient\nprint(Dissolved_oxygen)\n\n# Calculate total oxygen by adding together bound and dissolved oxygen\nTotal_oxygen = Bound_oxygen + Dissolved_oxygen \nprint(Total_oxygen)\n\n19.296\n0.2759\n19.5719\n\n\n\n\n\nNow if we have a second patient with different readings - how quickly can you calculate the total blood oxygen?\n\nPatient 2 haemoglobin measurements\n\n\nType\nMeasurement\nUnits\n\n\n\n\nHaemoglobin concentration\n12\ng / dL blood\n\n\nHaemoglobin saturation\n94\n%\n\n\nArterial oxygen tension\n76\nmmHg",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Oxygen in blood exercise"
    ]
  },
  {
    "objectID": "worksheets/DataTypes.html",
    "href": "worksheets/DataTypes.html",
    "title": "Data Types",
    "section": "",
    "text": "In the previous examples, we’ve only been using strings. A string is a collection of characters - such as letters, numbers and punctuation.\nWe can also use different data types. Below are some examples of different data types and how we define them in python.\n\nPython Data types\n\n\n\n\n\n\n\n\n\nData Type\nShorthand\nDescription\nDefine With\nExamples\n\n\n\n\nString\nstr\nA collection of characters\nQuotes “” or ’’\nx = “5 jumping chimpanzees”\n\n\nInteger\nint\nA whole number\nDigit without quotes or decimal point\nx = 5\n\n\nFloat\nfloat\nA floating point number\nDigit with a decimal point, no quotes\nx = 5.7\n\n\nList\nlist\nA collection of strings, integers, floats or lists\nSquare brackets [ ]\nx = [“5 jumping chimpanzees”, 5, 5.7]\n\n\n\nWe can check what type our variable is using the function type().\nTry:\n\n\n\n\n\n\nChange the line x = 5.7 to the other examples in Table 1 - what do you get each time?\nThis will be really useful when we have errors in our code - we might think we’re using an integer when our variable is actually a string…",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Python essentials",
      "Data Types"
    ]
  },
  {
    "objectID": "worksheets/Lists.html",
    "href": "worksheets/Lists.html",
    "title": "Lists",
    "section": "",
    "text": "Lists are a data type used to store multiple variables. This is called a sequence type, and strings are also sequence types (as they store multiple characters).",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lists"
    ]
  },
  {
    "objectID": "worksheets/Lists.html#creating-a-list",
    "href": "worksheets/Lists.html#creating-a-list",
    "title": "Lists",
    "section": "",
    "text": "Lists are a data type used to store multiple variables. This is called a sequence type, and strings are also sequence types (as they store multiple characters).",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lists"
    ]
  },
  {
    "objectID": "worksheets/Lists.html#talk-to-your-peers",
    "href": "worksheets/Lists.html#talk-to-your-peers",
    "title": "Lists",
    "section": "Talk to your peers:",
    "text": "Talk to your peers:\nThis next exercise is interactive: Ask at least six of your peers for their name, and at least two of the question below and note down the answers.\n\nWhat is your favourite colour?\nWhere did you grow up?\nHow many siblings do you have, if any?\nAre you a morning or an evening person?\n\nYou can also come up with your own questions if you would like.\nNow you have some data - we can look at storing it.\nTry:\n\n\n\n\n\n\nHere we used:\n\nsquare brackets [] to define a list\ncommas , to separate items in the list\nquotes \"\" to define the start and end of each string in our list.",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lists"
    ]
  },
  {
    "objectID": "worksheets/Lists.html#give-it-a-go",
    "href": "worksheets/Lists.html#give-it-a-go",
    "title": "Lists",
    "section": "Give it a go:",
    "text": "Give it a go:\n\nDefine two lists for your questions; “names” (as above) and the other with a sensible name for the question you chose (e.g. “favourite_colour”)\nAdd the data you collected earlier to the two lists\nPrint out the two lists you created and check that they are as expected.\n\nNote: Variable names can’t contain spaces, or special characters such as &. Good practice is to use underscores '_' as in the above example!",
    "crumbs": [
      "Learn",
      "**Python introduction: basics**",
      "Lists and dictionaries",
      "Lists"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Help, Error!",
    "section": "",
    "text": "One of the most frustrating parts of learning programming is getting an Error message and trying to figure out what it means!\nError messages are trying to be helpful - telling you what line they find an error on and what type of error it is. But they’re not foolproof, sometimes there may be an error on the line before or earlier in the code…\nThis cheatsheet shows some common Python errors you will encounter as a beginner, with simple examples. Try and compare your error to these…"
  },
  {
    "objectID": "help.html#nameerror",
    "href": "help.html#nameerror",
    "title": "Help, Error!",
    "section": "1. NameError",
    "text": "1. NameError\nHappens when you use a variable or function name that Python doesn’t know.\n\nprint(unknown_variable)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 print(unknown_variable)\n\nNameError: name 'unknown_variable' is not defined\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe often get a NameError if we have a typo in our variable name. Python doesn’t know that you wanted the variable pineapple when you print pinapple!"
  },
  {
    "objectID": "help.html#typeerror",
    "href": "help.html#typeerror",
    "title": "Help, Error!",
    "section": "2. TypeError",
    "text": "2. TypeError\nOccurs when an operation is applied to the wrong type of object.\nWe can add two numbers together, or two words together, but we can’t add a number to a word - python doesn’t know what to do!\n\n\"Age: \" + 42\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 \"Age: \" + 42\n\nTypeError: can only concatenate str (not \"int\") to str"
  },
  {
    "objectID": "help.html#valueerror",
    "href": "help.html#valueerror",
    "title": "Help, Error!",
    "section": "3. ValueError",
    "text": "3. ValueError\nRaised when a function receives the right type but an invalid value.\nWhat is wrong with the below example?\n\nint(\"forty-two\")\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 int(\"forty-two\")\n\nValueError: invalid literal for int() with base 10: 'forty-two'"
  },
  {
    "objectID": "help.html#indexerror",
    "href": "help.html#indexerror",
    "title": "Help, Error!",
    "section": "4. IndexError",
    "text": "4. IndexError\nHappens when you try to access a list index that doesn’t exist.\n\nletters = [\"A\", \"B\", \"C\"]\nprint(letters[5])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[4], line 2\n      1 letters = [\"A\", \"B\", \"C\"]\n----&gt; 2 print(letters[5])\n\nIndexError: list index out of range\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nPython starts counting from 0! The first item in your list is item 0, not item 1…"
  },
  {
    "objectID": "help.html#keyerror",
    "href": "help.html#keyerror",
    "title": "Help, Error!",
    "section": "5. KeyError",
    "text": "5. KeyError\nOccurs when you look up a missing key in a dictionary.\n\nbases = {\"A\": 1, \"C\": 2}\nprint(bases[\"T\"])\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[5], line 2\n      1 bases = {\"A\": 1, \"C\": 2}\n----&gt; 2 print(bases[\"T\"])\n\nKeyError: 'T'\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can always check what the keys in your dictionary are by using print(dictionary_name.keys())"
  },
  {
    "objectID": "help.html#attributeerror",
    "href": "help.html#attributeerror",
    "title": "Help, Error!",
    "section": "6. AttributeError",
    "text": "6. AttributeError\nHappens when you try to call a method that doesn’t exist for an object.\n\nnum = 42\nnum.append(99)\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[6], line 2\n      1 num = 42\n----&gt; 2 num.append(99)\n\nAttributeError: 'int' object has no attribute 'append'\n\n\n\nWe can .append() to a list (add an item to the end of a list) but if we try to do the same with a number python will be confused…"
  },
  {
    "objectID": "help.html#zerodivisionerror",
    "href": "help.html#zerodivisionerror",
    "title": "Help, Error!",
    "section": "7. ZeroDivisionError",
    "text": "7. ZeroDivisionError\nRaised when you divide by zero.\n\n10 / 0\n\n\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 10 / 0\n\nZeroDivisionError: division by zero\n\n\n\nThis isn’t a python problem, it’s a maths problem! If you have 10 sweets and you split them between 0 people, who do you give them to?\nRead more about why we can’t divide by 0"
  },
  {
    "objectID": "help.html#importerror-modulenotfounderror",
    "href": "help.html#importerror-modulenotfounderror",
    "title": "Help, Error!",
    "section": "8. ImportError / ModuleNotFoundError",
    "text": "8. ImportError / ModuleNotFoundError\nOccurs when you try to import something that doesn’t exist.\n\nimport not_a_real_module\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 import not_a_real_module\n\nModuleNotFoundError: No module named 'not_a_real_module'\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nMake sure you have spelt the module name correctly. If it doesn’t exist, you may need to install it in the VSCode terminal: pip install module_name"
  },
  {
    "objectID": "help.html#indentationerror",
    "href": "help.html#indentationerror",
    "title": "Help, Error!",
    "section": "9. IndentationError",
    "text": "9. IndentationError\nHappens when code isn’t indented properly.\n\ndef hello():\nprint(\"Hi\")   # wrong indentation\n\n\n  Cell In[9], line 2\n    print(\"Hi\")   # wrong indentation\n    ^\nIndentationError: expected an indented block after function definition on line 1\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAn indent is typically four spaces.\n\n# not indented line\n   #indented line\n\nAlso make sure you include the : after your if, for or def statement!"
  },
  {
    "objectID": "help.html#syntaxerror",
    "href": "help.html#syntaxerror",
    "title": "Help, Error!",
    "section": "10. SyntaxError",
    "text": "10. SyntaxError\nGeneral error for code that breaks Python’s rules.\nUsually a problem with the grammar - are you missing a :, do you have an extra ,, have you kept the right format?\n\nprint(\"Hello\") print(\"World\")\n\n\n  Cell In[11], line 1\n    print(\"Hello\") print(\"World\")\n                   ^\nSyntaxError: invalid syntax\n\n\n\n\nCompare with a similar piece of code from the examples to check the structure!\n\n\nTips\n\nRead the error message carefully — it tells you the type and where it happened.\nWrite your code in small chunks and run it to see if it works. It’s much easier to fix one error than 10!\nDon’t panic — every Python programmer sees these daily! Even after over 10 years…\n\n\n\n\nGIF of an otter clapping"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set up",
    "section": "",
    "text": "We are going to use Python for this course. You can do this on campus from a University Computer, online using a free Google Colab account that you can access from any web browser, or by downloading Python and Visual Studio Code onto your own device.\nClick below to see the set up instructions for each:\n\nUniversity ComputerOnline CloudOwn Device\n\n\nTo get set up, follow the below steps. Click each step for detailed instructions.\n\n\n\n\n\n\nNoteStep 1: Launch Visual Studio Code from AppsAnywhere\n\n\n\n\n\n\nType in AppsAnywhere to the windows bar. This will open in a web browser\nOpen the following two applications by typing the name in and clicking launch:\n\nPython\nVisual Studio Code\n\n\n\n\n\nGIF of Opening VSCode\n\n\n\n\n\n\n\n\n\n\n\nCautionStep 2: Navigate to your OneDrive folder\n\n\n\n\n\n\nClick “Open Folder” on the loading screen\nFind your OneDrive folder. You should be able to recognise the files and folders listed, from what you have saved here in your other classes.\nCreate a new folder for this python course, and open this folder.\n\n\n\n\nGIF of Opening OneDrive folder\n\n\n\n\n\n\n\n\n\n\n\nTipStep 3: Install the python extension\n\n\n\n\n\n\nClick the extensions tab\nSearch and install python\n\n\n\n\nGIF of Making a Folder\n\n\n\n\n\n\n\n\n\n\n\nCautionStep 4: Create and run a Python file\n\n\n\n\n\nYou’re now ready to run some Python code!\n\nGo back to your folder\nClick the “New file” button\nGive your file a name ending .py (e.g. “Test.py” )\nAdd the following line to your file\n\n\nprint(\"Hello World\")\n\n\nPress the run button\n\nAnd that’s it - you’re all set up!\n\n\n\nGIF of making a python File\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nMake sure you can find your file in file explorer. Always back up your work such as saving in OneDrive or emailing to yourself so that you don’t lose your progress.\n\n\n\n\n\n\n\n\nGoogle Colab is a free tool for running python on a browser - from a file saved in your Google Drive.\n\n\n\n\n\n\nCautionCaution\n\n\n\n\n\nYou shouldn’t need a paid account for this course. If your work becomes too large, then I suggest downloading and running Python and Visual Studio Code on your device.\n\n\n\nTo get set up, follow the instructions below:\n\n\n\n\n\n\nNoteSet up Google Colab notebook\n\n\n\n\n\n\nSign into Google with any Google account\nGo to Google Colab\nClick file -&gt; New Notebook in Drive\nName your file (e.g “Test.ipynb”) The file is an Ipython Notebook so ends with .ipynb instead of .py\nAdd and run the following code:\n\n\nprint(\"Hello World\")\n\n\n\n\nGIF of creating a Google Colab notebook\n\n\n\n\n\nAnd that’s it for setting up with Google Colab!\n\n\nIf you’re working on your own laptop or computer it’s also possible to download and run Python and Visual Studio Code. These are both free, open-source programs.\n\n\n\n\n\n\nNote\n\n\n\n\n\nIf you’re working on a tablet, chromebook or your device is typically slow, I recommend looking at the Google Colab option instead\n\n\n\nInstalling Python and VSCode can be a bit fiddley - let the teaching team know if you’d like any support.\nWhy two programs? Python is the programming language, that takes our data and does our analyses. Visual Studio Code is a program we use to edit and run our python files. It’s a text editor that is specialised for coding projects.\n\n\n\n\n\n\nNoteStep 1: Install Python\n\n\n\n\n\nYou can Install Python from this website. It should automatically detect whether you are on a Windows or a Mac PC and suggest which version to download. Click download and then follow the installation instructions.\n\n\n\nScreenshot of Python website\n\n\n\n\n\n\n\n\n\n\n\nCautionStep 2: Install Visual Studio Code\n\n\n\n\n\nOnce Python is installed, you can install Visual Studio Code from this website.\nIt should also automatically detect what type of PC you are on.\n\n\n\nScreenshot of Visual Studio Code website\n\n\n\n\n\n\n\n\n\n\n\nTipStep 3: Create or move to a folder for LS6036\n\n\n\n\n\n\nClick “Open Folder” on the loading screen\nBrowse files until you can find your documents - wherever you keep your university files.\nCreate a new folder for this python course, and open this folder.\n\n\n\n\nGIF of Opening OneDrive folder\n\n\n\n\n\n\n\n\n\n\n\nCautionStep 4: Install the python extension\n\n\n\n\n\nNow we need to set up Visual Studio Code to recognise and use your version of python.\n\nClick the extensions tab\nSearch and install python\n\n\n\n\nGIF of Making a Folder\n\n\n\n\n\n\n\n\n\n\n\nNoteStep 5: Write and run a python file\n\n\n\n\n\nYou’re now ready to run some Python code!\n\nGo back to your folder\nClick the “New file” button\nGive your file a name ending .py (e.g. “Test.py” )\nAdd the following line to your file\n\n\nprint(\"Hello World\")\n\n\nPress the run button\n\nAnd that’s it - you’re all set up!\n\n\n\nGIF of making a python File"
  }
]