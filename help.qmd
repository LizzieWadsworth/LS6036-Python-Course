# Help, Error!

One of the most frustrating parts of learning programming is getting an Error message and trying to figure out what it means! 

Error messages are _trying_ to be helpful - telling you what line they find an error on and what type of error it is. But they're not foolproof, sometimes there may be an error _on the line before_ or earlier in the code... 

This cheatsheet shows some **common Python errors** you will encounter as a beginner, with simple examples. Try and compare your error to these...

---

## 1. NameError

Happens when you use a variable or function name that Python doesn’t know. 

```{python}
#| error: true
print(unknown_variable)
```

::: {.callout-tip}
We often get a NameError if we have a **typo** in our variable name. Python doesn't know that you wanted the variable `pineapple` when you print `pinapple`! 
:::


---

## 2. TypeError

Occurs when an operation is applied to the wrong type of object.

We can add two numbers together, or two words together, but we can't add a number to a word - python doesn't know what to do! 

```{python}
#| error: true
"Age: " + 42
```

---

## 3. ValueError

Raised when a function receives the right type but an invalid value.

_What is wrong with the below example?_

```{python}
#| error: true
int("forty-two")
```

---

## 4. IndexError

Happens when you try to access a list index that doesn’t exist.

```{python}
#| error: true
letters = ["A", "B", "C"]
print(letters[5])
```

::: {.callout-caution}
**Python starts counting from 0!** 
The first item in your list is item 0, not item 1... 
:::


---

## 5. KeyError

Occurs when you look up a missing key in a dictionary.

```{python}
#| error: true
bases = {"A": 1, "C": 2}
print(bases["T"])
```

::: {.callout-tip}
You can always check what the keys in your dictionary are by using `print(dictionary_name.keys())`
:::


---

## 6. AttributeError

Happens when you try to call a method that doesn’t exist for an object.

```{python}
#| error: true
num = 42
num.append(99)
```

We can `.append()` to a list (add an item to the end of a list) but if we try to do the same with a number python will be confused... 

---

## 7. ZeroDivisionError

Raised when you divide by zero.

```{python}
#| error: true
10 / 0
```

This isn't a python problem, it's a maths problem! If you have 10 sweets and you split them between 0 people, who do you give them to?

[Read more about why we can't divide by 0](https://www.mathsisfun.com/numbers/dividing-by-zero.html)

---

## 8. ImportError / ModuleNotFoundError

Occurs when you try to import something that doesn’t exist.

```{python}
#| error: true
import not_a_real_module
```

::: {.callout-tip}
Make sure you have spelt the module name correctly. If it doesn't exist, you may need to install it in the VSCode terminal: 
`pip install module_name`
:::


---

## 9. IndentationError

Happens when code isn’t indented properly.

```{python}
#| error: true
def hello():
print("Hi")   # wrong indentation
```

::: {.callout-tip}
An indent is typically four spaces. 
```{python}
# not indented line
   #indented line
```
Also make sure you include the `:` after your `if`, `for` or `def` statement!
:::

---

## 10. SyntaxError

General error for code that breaks Python’s rules.

Usually a problem with the grammar - are you missing a `:`, do you have an extra `,`, have you kept the right format?

```{python}
#| error: true
print("Hello") print("World")
```

Compare with a similar piece of code from the examples to check the structure!

---

### Tips

- **Read the error message carefully** — it tells you the type and where it happened.
- Write your code in **small chunks** and run it to see if it works. It's much easier to fix one error than 10!
- Don’t panic — every Python programmer sees these daily! _Even after over 10 years..._

![GIF of an otter clapping](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMDY4MzFjNjdmNDdjYjc3M2RhZDU4YmM4NDIxMmM2MjQ2NGYxYzFjMiZlcD12MV9pbnRlcm5hbF9naWZzX2dpZklkJmN0PWc/ely3apij36BJhoZ234/giphy-downsized-large.gif)