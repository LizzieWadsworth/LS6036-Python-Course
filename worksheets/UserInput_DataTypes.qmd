# Input data types

The returned result of ```input()``` will always be a string... 

Try the below example - it should give you an error! 

```{python}
#| eval: false
# Calculate users age in 10 years
user_age = input("What is your age? ")
future_age = user_age + 10
print("In ten years you will be ", future_age)
```

You should get the error: 

```{python}
#| echo: false
user_age = "hello"
```

```{python}
#| echo: false
#| error: true
future_age = user_age + 10
```

This is because the age the user types in - although the user probably used digits, such as 32, - is read into python by the ```input()``` function as a string. 

To change a string to a numerical value, so that we can do things like addition, we need to use the ```int()``` or ```float()``` functions. 

Examples of different functions to use data types is found below:

```{python}
#| eval: false

# Change from a string to an integer using str()
my_string = "10"
my_int = int(my_string)
print (my_int, "is of type", type ( my_int ))

# Change from a string to a floating point number using float()
my_string = "10.5"
my_float = float(my_string)
print (my_float, "is of type", type ( my_float ))

# Change from an integer to a string using str()
my_int = 10
my_string = str(my_int)
print (my_string, "is of type", type ( my_string ))

```

## Give it a go: 

Write a python program which: 

1.  Asks the user which year they were born 
2.  Calculates how old they will be in the year 3000 
3.  Prints this information back to the user 

::: { .callout-tip collapse="true" title="Show answer"}
```{python}
#| eval: false 
# Get user birth year using input()
user_birth_year = input("What year were you born?")

# Convert birth year to integer
user_birth_year = int(user_birth_year)

# Calculate age in the Year 3000
user_year_3000_age = 3000 - user_birth_year 

# Print result
print("In the year 3000 you will be: ", user_year_3000_age)
```
:::


