# Function arguments 

Functions are a great way to _reuse_ code you've used previously but on a different piece of data. 

We can give a function *arguments* inside the round brackets `()` - these can be any variables (strings, ints, lists, dictionaries....)

_It's good practice to name the arguments that the function uses different to the variables used in the rest of the program: This makes it really clear what each argument is referring to_

You can add as many function arguments as you need. 

```{python}
#| eval: false
# string function takes two arguments - string and number
def print_string(our_string, our_number):
    print(our_number, our_string)

# we can run the function using different strings and numbers
print("Function attempt 1:")
print_string("Hello", 25)

# Call the function again with different values
print("Function attempt 2:")
print_string("World", -32)
```

## Give it a go:

Write a function that accepts a string and calculates the number of upper case letters and lower case letters.

::: { .callout-tip collapse="true" title="Show answer"}

```{python}
# define function with one argument - chosen_string
def upper_and_lower_count(chosen_string):
    # create totals for upper and lower case characters
    upper = 0
    lower = 0
    # loop through every letter in chosen_string
    for letter in chosen_string:
        # if letter is upper case, add one to upper
        if letter.isupper():
            upper += 1
        # elif letter is lower case, add one to lower
        # why did we not use else? Would else give the same answer?
        elif letter.islower():
            lower += 1
    # print the results
    print("The string", chosen_string, "has", upper, "upper case characters")
    print("The string", chosen_string, "has", lower, "lower case characters")

# run the function with string "Hello My Lovelies"
upper_and_lower_count("Hello My Lovelies")
```

:::