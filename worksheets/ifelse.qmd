# If and else

Sometimes we may want our code to act differently in different situations. For example, if we write a program to translate an mRNA sequence to an amino acid chain, we want the program to only start at the start codon and stop once we reach the stop codon. 

To do this we can use python keywords ```if``` and ```else```.
This follows the following struture: 

-  ```if {condition} :```
-  _indented code for if condition is True_ 
-  ```else:```
-  _indented code for if condition is False_ 
-  un-indented rest of code

An __indent__ is either 4 spaces ```"    "``` or a tab at the start of a line. This signals that we want this code _to be part of the if/else statement._

::: { .callout-tip collapse="true" title="Automatic indenting"}
When you write in Visual Studio Code or in Google Colab, it should automatically add the indentation for you as you write! 

This should happen after you've written your if statement _ending with ```:```_ and then press enter. 

To exit the indentation, you need to press backspace. You'll need to do this when you want to add your else statement, or any code you don't want in your if/else. 

::: {.panel-tabset}

## Visual Studio Code
![VSCode indentation screencase](/GIFs/ifelse_VScode.gif)

## Google Colab
![Colab indentation Screencast](/GIFs/ifelse_colab.gif)

:::


:::

Try the below example. This code uses ```True``` which is a _boolean_ data type.


```{pyodide}
# eval: false
# if statement 
still_alive = True 

if still_alive: 
  print("I'm still alive")
else: 
  print("Oh no")
```

We can also visualise this with a flow chart: 

![Flowchart of if statement](/images/mermaid_stillalive.svg)

## Give it a go:

**Try: the above if statement, but changing...**

1.  ```still_alive = true```
2.  ```still_alive = TRUE```
3.  ```still_alive = False```
4.  ```still_alive = "False"``` 
5.  ```still_alive = 0```
6.  ```still_alive = 1``` 
7.  ```still_alive = 0.1``` 

_Do you understand the above? Are there any that surprised you?_

Boolean True and False are their own data type ('bool'), like strings or integers...

```{python}
print ( type (True) )
```


