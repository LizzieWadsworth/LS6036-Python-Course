# Matplotlib colours 

You can also change the colour of the graph using the `color` option. 

_We do need to use the American spelling here, I am sorry..._

Here we use the base color `r` to make the graph red:

```{python}
# Import the plotting library from matplotlib 
import matplotlib.pyplot as plt

# Make a list of x values and y values
x = [0, 1, 2]
y = [10, 5, 8]

# Plotting x values against y values 
# Set color to red
plt.plot(x, y, color="r")

# View the created graph
plt.show()
```

```{python}
#| echo: false

import math

import matplotlib.pyplot as plt

import matplotlib.colors as mcolors
from matplotlib.patches import Rectangle


def plot_colortable(colors, *, ncols=4, sort_colors=True):

    cell_width = 212
    cell_height = 22
    swatch_width = 48
    margin = 12

    # Sort colors by hue, saturation, value and name.
    if sort_colors is True:
        names = sorted(
            colors, key=lambda c: tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(c))))
    else:
        names = list(colors)

    n = len(names)
    nrows = math.ceil(n / ncols)

    width = cell_width * ncols + 2 * margin
    height = cell_height * nrows + 2 * margin
    dpi = 72

    fig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi)
    fig.subplots_adjust(margin/width, margin/height,
                        (width-margin)/width, (height-margin)/height)
    ax.set_xlim(0, cell_width * ncols)
    ax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.)
    ax.yaxis.set_visible(False)
    ax.xaxis.set_visible(False)
    ax.set_axis_off()

    for i, name in enumerate(names):
        row = i % nrows
        col = i // nrows
        y = row * cell_height

        swatch_start_x = cell_width * col
        text_pos_x = cell_width * col + swatch_width + 7

        ax.text(text_pos_x, y, name, fontsize=14,
                horizontalalignment='left',
                verticalalignment='center')

        ax.add_patch(
            Rectangle(xy=(swatch_start_x, y-9), width=swatch_width,
                      height=18, facecolor=colors[name], edgecolor='0.7')
        )

    return fig
```

## Base colours

This is the list of base colours we can refer to with one letter:
```{python}
#| echo: false
plot_colortable(mcolors.BASE_COLORS, ncols=3, sort_colors=False)
plt.show()
```

## CSS colours

This is a list of all named colours we can use. This is the same as above, but we put the full name in (`color = "darkorchid"`)
```{python}
#| echo: false
plot_colortable(mcolors.CSS4_COLORS)
plt.show()
```